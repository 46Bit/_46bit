<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="/meta/feed.atom" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-04-05T22:46:44+01:00</updated><id>/</id><title type="html">46b.it</title><entry><title type="html">Building an encrypted virtual drive with FUSE.</title><link href="/2017/building-an-encrypted-drive-with-fuse/" rel="alternate" type="text/html" title="Building an encrypted virtual drive with FUSE." /><published>2017-04-05T00:00:00+01:00</published><updated>2017-04-05T00:00:00+01:00</updated><id>/2017/building-an-encrypted-drive-with-fuse</id><content type="html" xml:base="/2017/building-an-encrypted-drive-with-fuse/">&lt;p&gt;Today I’ve been at a mini-hackday in Liverpool, part of the &lt;a href=&quot;https://www.heacademy.ac.uk/training-events/national-conference-learning-and-teaching-cyber-security&quot;&gt;National Conference for Learning and Teaching in Cyber Security&lt;/a&gt;. Day 1 has some cybersecurity competitions, and a team of 3 of us participated in the Software Development stream.&lt;/p&gt;

&lt;p&gt;I’ve been to a lot of hackdays—between 16 and 20 I won prizes in at least six of them. I picked up a minimal-product/prototyping mindset, but it was hard to keep going afterwards. Over time my enthusiasm waned. The time limits, intensity and limited feedback hindered stretching my boundaries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This competition seemed quite interesting because writing Cryptography-related software is hard.&lt;/strong&gt; It’s hard to start off in the right direction, and very easy to screw up later on. As such having professional feedback on an interesting day of work sounded great.&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;our task was to build encrypted local partitions.&lt;/strong&gt; We had to build a system which stored encrypted keys on USB keys. Inserting such a USB key automatically prompted users to authenticate for a particular key. The encrypted volume was then to be used as a virtual drive.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;work-begins&quot;&gt;Work begins&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sdhand&quot;&gt;@sdhand&lt;/a&gt; is a first-year Computer Scientist at York, and he focused on detecting USB drives and getting the system + GUI together. &lt;a href=&quot;https://github.com/icydoge&quot;&gt;@icydoge&lt;/a&gt; concentrated on the encryption using &lt;a href=&quot;https://download.libsodium.org/doc/secret-key_cryptography/authenticated_encryption.html&quot;&gt;NaCl AEAD&lt;/a&gt;. I took on something new to me: engineering the encrypted drive.&lt;/p&gt;

&lt;p&gt;After a little research, we settled on a FUSE filesystem wrapper. FUSE provides a virtual disk drive with a custom filesystem - for instance &lt;a href=&quot;https://github.com/libfuse/sshfs&quot;&gt;sshfs&lt;/a&gt;. For our usecase, we encrypt writes and decrypt reads so that the data is encrypted when on physical disk but decrypted when accessed. FUSE was completely new to me and rather exciting.&lt;/p&gt;

&lt;p&gt;I’ve been trying to get deeper into the Systems side of things, and this was a very new experience. Operating on memories of reading about ordinary disk encryption, my first implementation decision was whether to encrypt the entire filesystem or each file individually. Encrypting each individual file has many disadvantages, most notably that the metadata of files (e.g., their name) is unobscured. We only had 5 hours (far shorter than it sounds if you get stuck!) and so I chose to do it file-by-file, with this as an important caveat.&lt;/p&gt;

&lt;p&gt;I sketched out a plan for how each API method could adapt to our encrypted filesystem. Opening files would read and decrypt file contents into memory; reading files would output that in-memory plaintext; writing files would update that plaintext and encrypt it to disk; flushing or closing files would encrypt it to disk. File descriptors (handles to open files) were handled very simply by giving the same integer for each file path.&lt;/p&gt;

&lt;h2 id=&quot;debugging-nul&quot;&gt;Debugging &lt;code class=&quot;highlighter-rouge&quot;&gt;NUL&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This worked rather well until I started hitting difficult debugging issues. I was getting mysterious &lt;code class=&quot;highlighter-rouge&quot;&gt;NUL&lt;/code&gt; bytes when reading and writing files, and despite a number of bugfixes I could not seem to fix the final issue. For the powerful ecosystem and rapid development we were working with Python, and various issues forced us to mix &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bytearray&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; in one class.&lt;/p&gt;

&lt;p&gt;I had no testsuite. I hadn’t found one when getting some example code and I wasn’t convinced such a tight timebound was enough to repay the slower development time. So facing tough issues I radically simplified and stopped storing decrypted contents in memory. Every time file contents were needed the entire file was decrypted. I felt that once this simpler form worked I could easily re-add the complexity. I feel the in-memory approach was easy enough to not be premature optimisation, but it did prove to add too much indirection for how unfamiliar I was.&lt;/p&gt;

&lt;p&gt;This final issue was that files were mysteriously having &lt;code class=&quot;highlighter-rouge&quot;&gt;NUL&lt;/code&gt; bytes appended each time they were saved. Nothing I did could fix the issue, to the extent it was bizarre. Stuck, I warned Sam and Chongyang I’d hit a blocking issue. Chongyang and myself were able to simplify away some ugly code but couldn’t address the problem. It was Sam who suddenly realised we weren’t giving correct filesizes.&lt;/p&gt;

&lt;p&gt;One method of the FUSE API that filesystems implement is &lt;code class=&quot;highlighter-rouge&quot;&gt;getattr&lt;/code&gt;. This provides metadata on items in the filesystem, including the sizes of files. Sam had built things with FUSE before and had realised that we were passing through the size of the encrypted files rather than the decrypted ones! This was rather bad: our encrypted files were padded with a nonce value.&lt;/p&gt;

&lt;p&gt;Our code was built in a hurry. Nonetheless, &lt;strong&gt;see &lt;a href=&quot;https://github.com/46bit/liverpool&quot;&gt;liverpool on Github&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cybersecurity-as-a-career-direction&quot;&gt;Cybersecurity as a career direction?&lt;/h2&gt;

&lt;p&gt;I was rather interested to have our Cryptography-related work reviewed, but in practice this didn’t work so well. I’m not sure if the judges were non-technical or just had a “gold standard” they were seeking but there wasn’t very effective feedback. Nonetheless a very enjoyable day and we’ve reviewed things ourselves on the train back to York.&lt;/p&gt;

&lt;p&gt;I enjoyed the &lt;a href=&quot;/2017/coldfusion-insecure-escape-spaces/&quot;&gt;Security work I’ve done for IT Services here in York&lt;/a&gt;, and with graduation soon approaching I’ve considered going deeply into cybersecurity. But I’d rather bring my security mindset to more typical engineering roles. I have a rough plan to take an ethical hacking certification in my spare time once I’m settled after graduation, as I’d like to make security a more formal part of my role over time.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today I’ve been at a mini-hackday in Liverpool, part of the National Conference for Learning and Teaching in Cyber Security. Day 1 has some cybersecurity competitions, and a team of 3 of us participated in the Software Development stream. I’ve been to a lot of hackdays—between 16 and 20 I won prizes in at least six of them. I picked up a minimal-product/prototyping mindset, but it was hard to keep going afterwards. Over time my enthusiasm waned. The time limits, intensity and limited feedback hindered stretching my boundaries. This competition seemed quite interesting because writing Cryptography-related software is hard. It’s hard to start off in the right direction, and very easy to screw up later on. As such having professional feedback on an interesting day of work sounded great. So, our task was to build encrypted local partitions. We had to build a system which stored encrypted keys on USB keys. Inserting such a USB key automatically prompted users to authenticate for a particular key. The encrypted volume was then to be used as a virtual drive.</summary></entry><entry><title type="html">Brexit.</title><link href="/2017/brexit/" rel="alternate" type="text/html" title="Brexit." /><published>2017-03-31T00:00:00+01:00</published><updated>2017-03-31T00:00:00+01:00</updated><id>/2017/brexit</id><content type="html" xml:base="/2017/brexit/">&lt;p&gt;On Tuesday night I tried to tweet some thoughts about Brexit:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I tried to write something about Brexit here and now I&amp;#39;ve gone to find the gin.&lt;/p&gt;&lt;p&gt;&amp;mdash; Michael Mokrysz (@46bit) &lt;a href=&quot;https://twitter.com/46bit/status/846845924991254528&quot;&gt;March 28, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://yougov.co.uk/news/2016/06/27/how-britain-voted/&quot;&gt;71% of my agegroup was for Remain.&lt;/a&gt;&lt;/strong&gt; I was very much for Remain; I’m still very much for Remain. The level of emotional attachment on either side is severe. This is going to run and run.&lt;/p&gt;

&lt;p&gt;With Article 50 now triggered it seems fairly sure we’re headed ‘out’ in some form. This seems set to dominate the headlines and the government for years to come. This will be years of (at best) standing still, instead of actual governance.&lt;/p&gt;

&lt;p&gt;For me the best outcomes would be an EEA-style deal or if not then &lt;a href=&quot;http://www.saveourcitizenship.eu&quot;&gt;Associate EU Citizenship&lt;/a&gt;. Associate EU Citizenship is the idea that those Brits who choose could retain EU Citizenship on some level. For all sorts of reasons it seems &lt;a href=&quot;https://www.theguardian.com/uk-news/2016/dec/12/eu-citizenship-deal-for-british-nationals-has-no-chance-say-experts&quot;&gt;rather unlikely&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don’t expect I’ll ‘get behind Brexit’ for the same reason I’d not pick up a copy of the Daily Mail&lt;/strong&gt;: it’s a crafted narrative giving the worst of humanity. I hope that we’ll regret this as a nation, but I expect a lot of bitterness if and as the downsides hit.&lt;/p&gt;

&lt;p&gt;Those native Brits able to claim EU Citizenship are doing so, and those with an interest at retaining links to the EU have suddenly become very keen to move there while Free Movement remains intact.&lt;/p&gt;

&lt;p&gt;As for non-Brits in York, I’ve overheard discussions as to whether people want to fill out 85-page residence forms or go find somewhere more willing to have them - particularly relevant here at the University, when research is often funded and conducted on a continental or worldwide scale. As of yet I’m still not sure whether to apologise or hug them.&lt;/p&gt;

&lt;h3 id=&quot;we-already-had-issues&quot;&gt;We already had issues&lt;/h3&gt;

&lt;p&gt;Here’s things the country now needs to deal with that aren’t the EU negotiation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The SNP would like to revote on independence and Northern Ireland’s status is unknowable. I wish the people of Scotland all the best whatever they decide, and hypothetically similar for NI.&lt;/li&gt;
  &lt;li&gt;The housing crisis eating working people’s incomes will continue on.&lt;/li&gt;
  &lt;li&gt;The slide towards buying later will make saving for retirement or any other purpose ever more distant, making us poorer.&lt;/li&gt;
  &lt;li&gt;University fees will start to creep upwards at the ‘higher quality’ Universities, to encourage students to balance debt against opportunity.&lt;/li&gt;
  &lt;li&gt;High wages will move to the Continent for access reasons.&lt;/li&gt;
  &lt;li&gt;The NHS, its staff and its patient may suffer terribly from a lack of nurses.&lt;/li&gt;
  &lt;li&gt;Civil liberties and leglisation to protect the world may or may not go in a worse direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;there-are-bigger-issues-to-come&quot;&gt;There are bigger issues to come&lt;/h3&gt;

&lt;p&gt;We’re also headed for quite a few anthropogenic disasters. None of these should read surprising:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Temperatures will rise.&lt;/li&gt;
  &lt;li&gt;All coral reefs on Earth may die; ocean acidification will wreak wider havoc (&lt;a href=&quot;https://www.theguardian.com/environment/2010/dec/07/coral-reefs-disappear-lifetime&quot;&gt;source&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Glaciers are melting, leaving rivers emptier in the summer.&lt;/li&gt;
  &lt;li&gt;Crop failures will grow.&lt;/li&gt;
  &lt;li&gt;Extreme climate events will worsen.&lt;/li&gt;
  &lt;li&gt;Methane releases from permafrost may grow.&lt;/li&gt;
  &lt;li&gt;Some of the Middle East may experience unlivable heatwaves (&lt;a href=&quot;https://www.theguardian.com/environment/2015/oct/26/extreme-heatwaves-could-push-gulf-climate-beyond-human-endurance-study-shows&quot;&gt;source&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Seas will rise in ways entirely outside our experience.&lt;/li&gt;
  &lt;li&gt;Europe’s population will dwindle. Africa’s population will boom. Asia’s importance will continue to grow. The USA will have a white minority for the first time.&lt;/li&gt;
  &lt;li&gt;People in poorer countries will continue to seek better lives, or any life at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a depressing list - I could list as many &lt;em&gt;good&lt;/em&gt;, hopeful things just as easily. The point is that these things matter, a lot, to our future.&lt;/p&gt;

&lt;p&gt;Brexit is at best a distraction to these problems. If the referendum and EU scapegoating is a snapshot of how the UK will cope with these stressors, it bodes very badly for our society.&lt;/p&gt;</content><author><name></name></author><summary type="html">On Tuesday night I tried to tweet some thoughts about Brexit: I tried to write something about Brexit here and now I&amp;#39;ve gone to find the gin.&amp;mdash; Michael Mokrysz (@46bit) March 28, 2017</summary></entry><entry><title type="html">Designing a better home for writing, part 1.</title><link href="/2017/a-better-home-for-writing/" rel="alternate" type="text/html" title="Designing a better home for writing, part 1." /><published>2017-03-28T00:00:00+01:00</published><updated>2017-03-28T00:00:00+01:00</updated><id>/2017/a-better-home-for-writing</id><content type="html" xml:base="/2017/a-better-home-for-writing/">&lt;p&gt;This blog experienced a lull from &lt;code class=&quot;highlighter-rouge&quot;&gt;2014-07-07&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;2017-02-27&lt;/code&gt;, some 966 days. A lot happened in that timespan - I went through a long period of therapy, spent awhile reverse-engineering Dig data from dead ESRI databases in an Archaeology department, and got into everything from Swing Dancing to Python.&lt;/p&gt;

&lt;p&gt;What didn’t change was that the old design, well, sucked. I don’t mean that it was the worst thing ever, but it was underwhelming as a place to write. So I’m going to talk through the redesign process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/old-new-aside.png&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’m not a UI designer, but I have a pretty good grasp of UX from working at a web agency and a consumer-focused startup. I think this showed: this design was perfectly functional, links were quite visible, and the important text stood out. But the UI was very &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;y-monochrome, perhaps a reflection of how I was feeling when I made it.&lt;/p&gt;

&lt;p&gt;When I started writing again I was nervous about how well I could write. I am not a naturally talented writer. But as with many skills worth learning, you just need to practice it enough that it becomes second nature. As I get more used to writing my writing should improve. I might build an audience of Rustaceans. My writing elsewhere should become clearer and easier. But part of this is having a pleasing place to write.&lt;/p&gt;

&lt;h2 id=&quot;redesign-narrative&quot;&gt;Redesign narrative&lt;/h2&gt;

&lt;h3 id=&quot;i-need-some-fonts&quot;&gt;I need some fonts&lt;/h3&gt;

&lt;p&gt;As someone who dabbles in frontend and hasn’t done intense JavaScript work since 2013, one of the brilliant things of 201x is webfonts. Being able to pick out pleasant fonts that suit your design is so much more powerful than relying on the client computer to have nice fonts. In my teens it was common to embed nicely-fonted text as images, with the actual text &lt;code class=&quot;highlighter-rouge&quot;&gt;text-indent: -9999px;&lt;/code&gt; out the way.&lt;/p&gt;

&lt;p&gt;At one point I had a paid &lt;a href=&quot;&quot;&gt;Typekit&lt;/a&gt; subscription, but more recently &lt;a href=&quot;&quot;&gt;Google Fonts&lt;/a&gt; offers free and liberally licensed fonts. Rather than being second-best, many or all of them are very high quality. Some seem curiously similar to hyper-expensive fonts I used in days gone by, on which I’ve no comment.&lt;/p&gt;

&lt;p&gt;Anyhow. I rather liked a Serif font in use by &lt;a href=&quot;https://www.barrucadu.co.uk&quot;&gt;Michael Walker&lt;/a&gt; (also of York Comp Sci), &lt;span style=&quot;font-family: Merriweather, serif;&quot;&gt;Merriweather&lt;/span&gt;, so I picked that. At some point during the process I also recruited Open Sans which is the font you’re reading right now.&lt;/p&gt;

&lt;h3 id=&quot;i-need-some-colours&quot;&gt;I need some colours&lt;/h3&gt;

&lt;p&gt;From past experience it helps me to get an initial colour palette. Many experienced designers seem to design in grayscale and treat the colours as second to content. However I find I can struggle with how to colorize a design and make it ‘pop.’ The content was largely already present - I wanted to stick with &lt;code class=&quot;highlighter-rouge&quot;&gt;hakyll&lt;/code&gt;, a Haskell static site generator, and I didn’t want to make major content alterations.&lt;/p&gt;

&lt;p&gt;I’ve always liked maroony reds, so that was my startpoint. Ten minutes of Adobe Kuler later, I had &lt;a href=&quot;https://color.adobe.com/46bit-color-theme-9379807/&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/new-colours.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The intensity of the cyans was concerning, but that was something to try and see. In practice the cyans are barely used, with a bright yellow and a deep blue instead. But the three, intense reds are the key to the design.&lt;/p&gt;

&lt;h3 id=&quot;first-sketch&quot;&gt;First sketch&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-1.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I chose to use my &lt;a href=&quot;/2017/coldfusion-insecure-escape-spaces/&quot;&gt;Securing legacy ColdFusion or: Why escape spaces against XSS?&lt;/a&gt; post as the content for the redesign. It isn’t my best post ever, but the mix of text and code is quite representative of what I’ll be writing here.&lt;/p&gt;

&lt;p&gt;A half hour in this is looking quite effective. The navigation colours don’t work, the logo text is too heavy, but the basic structure works.&lt;/p&gt;

&lt;h3 id=&quot;fourth-sketch&quot;&gt;Fourth sketch&lt;/h3&gt;

&lt;p&gt;Out of necessity I’m jumping ahead a way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-4.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point I’d copied in more content. This seemed essential in understanding how a long post would perform. I’ve previously found that simple designs with the header out of sight can be monochrome.&lt;/p&gt;

&lt;h3 id=&quot;sixth-sketch&quot;&gt;Sixth sketch&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-6.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As someone who does a lot of business with the US and rest-of-the-world, I’m quite a fan of the &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD&lt;/code&gt; date format. But here I started experimenting with including the day of the week, and in the final design I concluded a ‘human’ format would surprise users less.&lt;/p&gt;

&lt;h3 id=&quot;eleventh-sketch&quot;&gt;Eleventh sketch&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-11.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried to bring in more colours from the colourscheme, building a big header. This does sort-of work - but so much cyan is a risk when it comes to flexibility later.&lt;/p&gt;

&lt;h3 id=&quot;eighteenth-sketch&quot;&gt;Eighteenth sketch&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-18.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried dropping the header and adding a bar below the navigation to enhance the structural connection to the active navigation item. This seemed like a great idea.&lt;/p&gt;

&lt;h3 id=&quot;nineteenth-sketch-the-final-one&quot;&gt;Nineteenth sketch, the final one&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redesign-19.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inspired, I brought the reds and the more active navigation together. I loved it and decided this was enough to start implementing. Further changes could be made in the browser.&lt;/p&gt;

&lt;h3 id=&quot;a-logo-revived&quot;&gt;A logo revived&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/46bit-paper-large.png&quot; width=&quot;192&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In 2010 I hired &lt;a href=&quot;https://dribbble.com/sitelotus&quot;&gt;Anthony Bullock&lt;/a&gt; to build me a much nicer freelance portfolio than what I had been using. The aim was to get more work from a more pleasing internet presence, and I think it was successful. I was 16 at the time.&lt;/p&gt;

&lt;p&gt;I noticed the above designs could do with a nice logo. So I opened up my old one, that Anthony designed. I lightened some text, changed the hue of the “bit,” and played with the correct size. And it works nicely! Thanks again, Anthony.&lt;/p&gt;

&lt;h2 id=&quot;whats-live-now&quot;&gt;What’s live now&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/new-homepage.png&quot; width=&quot;600&quot; class=&quot;pull-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might notice - the narrow yellow line below the title bar originated in Sketch 11. It isn’t in the colourscheme at all; I picked it up by chance. But it has made it into the live design, dividing the title bar and the post date on pages that list posts. It was on other pages for a while, but it split up the title and the text too much - the Achilles Heel of this design.&lt;/p&gt;

&lt;p&gt;As of last night I’ve built in mobile support. Something I haven’t done with this design is use Flexbox - I’m still using floats for positioning the logo and navigation. I’ve my MEng project to do and am under a lot of time pressure, so it was the wrong time to learn that.&lt;/p&gt;

&lt;p&gt;There is still a long way to go, but this is a design that can grow easily.&lt;/p&gt;</content><author><name></name></author><summary type="html">This blog experienced a lull from 2014-07-07 to 2017-02-27, some 966 days. A lot happened in that timespan - I went through a long period of therapy, spent awhile reverse-engineering Dig data from dead ESRI databases in an Archaeology department, and got into everything from Swing Dancing to Python. What didn’t change was that the old design, well, sucked. I don’t mean that it was the worst thing ever, but it was underwhelming as a place to write. So I’m going to talk through the redesign process.</summary></entry><entry><title type="html">I’ve been published!</title><link href="/2017/writing-again/" rel="alternate" type="text/html" title="I've been published!" /><published>2017-03-14T00:00:00+00:00</published><updated>2017-03-14T00:00:00+00:00</updated><id>/2017/writing-again</id><content type="html" xml:base="/2017/writing-again/">&lt;h2 id=&quot;in-the-last-month-ive-published-twice-in-our-campus-newspaper-nouse&quot;&gt;In the last month I’ve published twice in our campus newspaper, Nouse&lt;/h2&gt;

&lt;p&gt;In the last month I’ve had two articles printed in the student newspaper, Nouse. Over the last year I’ve been collecting data on student union election candidates, and it was fantastic to pull the findings together.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.nouse.co.uk/2017/02/18/battle-of-the-colleges-whos-got-the-bnocs/&quot;&gt;Battle of the colleges: who’s got the BNOCs&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
I had about 48 hours to do preliminary analysis with a second year of data. Given those constraints and having not done this before, I’m pretty happy with the printed results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.nouse.co.uk/2017/03/07/yusu-elections-put-under-the-microscope-college-chances-campus-stances-and-gender-imbalances/&quot;&gt;YUSU elections put under the microscope: college chances, campus stances and gender imbalances&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
A few weeks later I came back with more thoroughly analysed findings. In summary - our Student Union elections seem biased against underprovisioned Colleges and female candidates are running for much more junior positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;These are based on the same underlying data but the latter post gave me two weeks to make a deeper analysis. I found it a tough but exciting learning curve to collect the data, do analysis and publish it with the fantastic team at Nouse. So many thanks to &lt;a href=&quot;http://www.nouse.co.uk/author/luke-rix-standing/&quot;&gt;Luke Rix-Standing&lt;/a&gt; (Editor), &lt;a href=&quot;http://www.nouse.co.uk/author/finn-judge/&quot;&gt;Finn Judge&lt;/a&gt; (Deputy Editor) and &lt;a href=&quot;http://www.nouse.co.uk/author/amelia-clarke/&quot;&gt;Amelia Clarke&lt;/a&gt; (News Editor).&lt;/p&gt;

&lt;h3 id=&quot;yes-published-in-a-paper-newspaper&quot;&gt;Yes, published in a paper newspaper.&lt;/h3&gt;

&lt;p&gt;It might seem strange that a Computer Scientist is publishing on paper. I disagree: electronic media is growing hugely in appeal, and Kindles have eaten much of my use of paper for reading. But media is a diverse field and if you want to reach people in a particular but diverse organisation the organisation’s own newspaper is a good way. Something I need a better process for is my method of analysing data: Google Sheets charts don’t suffice.&lt;/p&gt;

&lt;h3 id=&quot;evidence-based-policy&quot;&gt;Evidence-based policy&lt;/h3&gt;

&lt;p&gt;I am a little troubled by what I found. It isn’t necessarily surprising that Colleges more distant from the rest of the University get less attention. Given wider tends it isn’t necessarily surprising that female-identifying candidates run for more junior positions. But seeing the numbers show up consistently in a venue nobody else thought to look is illuminating.&lt;/p&gt;

&lt;p&gt;I set out to try and find out more about something public that wasn’t being looked at. I’ve developed an impression that a lot of real-world issues are widely known anecdotally, but nothing gets done because you can’t prove anything. As such, demonstrating an issue in a deep, quantitative analysis can be a useful step to arguing and driving for change.&lt;/p&gt;

&lt;p&gt;To an extent this belief is an artifact of my own mindset. Where possible I like to argue from evidence. Some years ago I participated in government/civic data hackdays, and that interest is still around under the surface.&lt;/p&gt;

&lt;p&gt;I’m a Course Rep in the Computer Science department at York, responsible for acting on student feedback and improving the student experience. A lot of Course Reps probably just argue for things they believe, and resolutely keep arguing until something is done or they get worn out. My approach to many issues is along this axis, but if something seems harder to get done I turn to an analytical mindset. This worked for highlighting problems with a Machine Learning class I took last year, after 4 years of the problems seeming to be ignored.&lt;/p&gt;

&lt;h2 id=&quot;i-argued-that-free-speech-arguments-are-being-used-out-of-confusion-or-even-bad-faith&quot;&gt;I argued that Free Speech arguments are being used out of confusion or even bad faith&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1357/&quot;&gt;&lt;img src=&quot;/assets/xkcd-free-speech-door.jpg&quot; alt=&quot;The XKCD cartoon I posted to argue the point.&quot; width=&quot;700&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This cartoon is &lt;a href=&quot;https://xkcd.com/1357/&quot;&gt;XKCD #1357&lt;/a&gt;, posted by J.K. Rowling on Twitter. I felt rather inspired by it. I believe that many anti-intellectual and illiberal attitudes are being used right now, and one is the concept everyone has the right to say their fill in your community.&lt;/p&gt;

&lt;p&gt;I very much disagree: hate speech and hate groups are not harmless; normalising their speech is a way to having us listen; and many of these groups are privileged and are not genuinely struggling for a platform (hence why their complaints are so loudly audible despite the supposed crushing censorship.)&lt;/p&gt;

&lt;p&gt;See my replies to Kragen at &lt;strong&gt;&lt;a href=&quot;https://www.facebook.com/photo.php?fbid=1257833534308290&amp;amp;set=a.147155018709486.33009.100002449667634&amp;amp;type=3&amp;amp;theater&quot;&gt;It’s just that the people listening think you’re an asshole and they’re showing you the door.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;ive-also-published-7-posts-here&quot;&gt;I’ve also published 7 posts here:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/engineering-discipline-and-craft/&quot;&gt;Engineering as slowly as possible&lt;/a&gt;: some thoughts on developing maintainably&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/evolutionary-computing/&quot;&gt;Introduction to Evolutionary Computing&lt;/a&gt;: background to building &lt;a href=&quot;https://github.com/46bit/evco&quot;&gt;Rust Genetic Programming library&lt;/a&gt; that I’ve been looking for good approaches into.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/2017/rust-generating-syntax-trees/&quot;&gt;Generating expression trees in Rust&lt;/a&gt; and &lt;a href=&quot;/2017/evco/&quot;&gt;Recursive Enum expression trees in Rust&lt;/a&gt;: some confused thoughts about specifying tree structures as Rust &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; types.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/coldfusion-insecure-escape-spaces/&quot;&gt;Securing legacy ColdFusion or: Why escape spaces against XSS?&lt;/a&gt;: in which I justify and classify ColdFusion websites as insecure-by-default.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/bicycle-skid/&quot;&gt;Glad I was wearing a cycle helmet&lt;/a&gt;: personal update on a bicycle accident.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/security-risk-assessment/&quot;&gt;Security Risk Assessments of Semi-Autonomous Vehicles&lt;/a&gt;: discussing the level of autonomy necessary to get adoption of automated road trains (the SARTRE project.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My blog will be relatively low-quality writing for the time being. I’ve never honed my skills at writing until now, which means that iterating on a blog post can be a slow and long process. &lt;strong&gt;My hope is that the (limited) editing I do will feed into my new writing, and my process will slowly improve.&lt;/strong&gt; We’ll see whether this works out, but it’s the Growth Mindset I’m taking.&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br /&gt;
—46bit&lt;/p&gt;</content><author><name></name></author><category term="York" /><summary type="html">In the last month I’ve had two articles printed in the student newspaper, Nouse. Over the last year I've been collecting data on student union election candidates, and it was fantastic to pull the findings together. Battle of the colleges: who’s got the BNOCs I had about 48 hours to do preliminary analysis with a second year of data. Given those constraints and having not done this before, I'm pretty happy with the printed results. YUSU elections put under the microscope: college chances, campus stances and gender imbalances A few weeks later I came back with more thoroughly analysed findings. In summary - our Student Union elections seem biased against underprovisioned Colleges and female candidates are running for much more junior positions.</summary></entry><entry><title type="html">Security Risk Assessments of Semi-Autonomous Vehicles</title><link href="/2017/security-risk-assessment/" rel="alternate" type="text/html" title="Security Risk Assessments of Semi-Autonomous Vehicles" /><published>2017-03-13T00:00:00+00:00</published><updated>2017-03-13T00:00:00+00:00</updated><id>/2017/security-risk-assessment</id><content type="html" xml:base="/2017/security-risk-assessment/">&lt;p&gt;I’m in my 4&lt;sup&gt;th&lt;/sup&gt; year at York, the Masters year of my MEng Computer Science degree. This term I’ve taken the Topics in Privacy and Security (PSEC) module, which takes a wide technical swath through privacy and security issues. But the assessment is mostly focused on password cracking and doing a security risk assessment for automated road convoys.&lt;/p&gt;

&lt;p&gt;We’re assessing how to bring an EU-funded project, &lt;a href=&quot;https://en.wikipedia.org/wiki/Safe_Road_Trains_for_the_Environment&quot;&gt;SARTRE&lt;/a&gt;, to market. The concept, “Safe Road Trains for the Environment,” allows an equipped car to automatically follow ~6m behind a Lead Vehicle. You could sit back and watch a movie—er, do productive work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sartre-drivers-doing-activities.png&quot; alt=&quot;SARTRE following drivers doing immersive non-driving tasks&quot; width=&quot;600&quot; /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;risksviability-of-commercial-deployment&quot;&gt;Risks/viability of commercial deployment&lt;/h2&gt;

&lt;p&gt;Deploying this commercially is to move from a proof-of-concept to a live system. The most immediate issue I’ve identified is with this concept of following drivers not paying attention to the road: in the demonstrator, following vehicles had professional drivers who were paying attention.&lt;/p&gt;

&lt;p&gt;On an actual highway unexpected things happen. If the platoon (convoy) is to return control to drivers should a sudden, unexpected thing happen then drivers cannot be doing other activities - they need road awareness.&lt;/p&gt;

&lt;p&gt;The Parliamentary Science and Technology Office came up with a &lt;a href=&quot;http://researchbriefings.parliament.uk/ResearchBriefing/Summary/POST-PN-443&quot;&gt;classification system for automated road vehicles.&lt;/a&gt; &lt;em&gt;Under this classification the proof-of-concept only meets the concept of Partial Autonomy.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hoc-autonomous-vehicle-levels.png&quot; alt=&quot;UK Parliamentary Office of Science and Technology Analysis of scales of vehicle autonomy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Drivers not having to be attentive is classed as High Autonomy.&lt;/em&gt; As with my musings, they’ve identified it as a hard step to take.&lt;/p&gt;

&lt;p&gt;The demonstrator dissolved convoys by having vehicles automatically back off to 50m separations and 50km/h speeds. Thus drivers could regain control in a gentle manner. Sadly this isn’t all that practical - in my opinion - on the road.&lt;/p&gt;

&lt;h2 id=&quot;collective-vs-individual-appeal&quot;&gt;Collective vs Individual appeal&lt;/h2&gt;

&lt;p&gt;The European Commision sees a major advantage of this project being reduced carbon emissions. The slipstream from vehicles a few metres ahead reduces the fuel used by vehicles in the platoon.&lt;/p&gt;

&lt;p&gt;The reduced fuel usage appeals to all drivers in the form of lower costs. That is, it has individualistic appeal. Having the necessary equipment fitted can apparently pay itself back within 3 years on trucks - if produced at scale something similar seems plausible for cars.&lt;/p&gt;

&lt;p&gt;Reducing CO&lt;sub&gt;2&lt;/sub&gt; emissions is still more of a collective issue. As Europeans we’re seeing oddities in the climate but not particularly as a critical issue every day. I suspect when it becomes a more individually-obvious issue there will finally be the will to take serious action, but at that point it may be too late to try anything but climate engineering.&lt;/p&gt;

&lt;p&gt;The problem for this project is that to the public, reduced fuel usage might not be worth the attention costs. If drivers are automatically monitored for paying attention to the road it is plausible to keep them attentive or evict them from a platoon. But staying immersed in the road environment when taking no action would be very tedious over long periods. As such I don’t think people will go for the project in high numbers unless this issue of having to pay constant attention is resolved.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;It isn’t clear how directly this is being taken further in the real world. But it’s a nice model for semi-automated road vehicles, if only the emergency recovery of control can be worked out.&lt;/p&gt;

&lt;p&gt;I’ve spent quite awhile with security-related topics before but this is my first time doing risk assessment exercises. I appreciate this work a lot more now. It can be dull, but that’s because it involves a lot of gathering information before any serious analysis can be done. That this is the first such exercise I’ve performed naturally means I’m being conservative in how I go about it - in real-life there’d be more freedom to do more iterations and get solid facts.&lt;/p&gt;</content><author><name></name></author><category term="York" /><summary type="html">I’m in my 4th year at York, the Masters year of my MEng Computer Science degree. This term I’ve taken the Topics in Privacy and Security (PSEC) module, which takes a wide technical swath through privacy and security issues. But the assessment is mostly focused on password cracking and doing a security risk assessment for automated road convoys. We’re assessing how to bring an EU-funded project, SARTRE, to market. The concept, “Safe Road Trains for the Environment,” allows an equipped car to automatically follow ~6m behind a Lead Vehicle. You could sit back and watch a movie—er, do productive work.</summary></entry><entry><title type="html">Glad I was wearing a cycle helmet</title><link href="/2017/bicycle-skid/" rel="alternate" type="text/html" title="Glad I was wearing a cycle helmet" /><published>2017-03-12T00:00:00+00:00</published><updated>2017-03-12T00:00:00+00:00</updated><id>/2017/bicycle-skid</id><content type="html" xml:base="/2017/bicycle-skid/">&lt;p&gt;One of my favourite things about York is how bicyclable it is. I grew up in the countryside but somewhere decidedly not safe to cycle from, so it’s a very welcome change. Aside from a couple of minor things it’s worked fine for the last 5 years. On Friday (&lt;code class=&quot;highlighter-rouge&quot;&gt;2017-03-10&lt;/code&gt;) I had a bit of an accident.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Sam Hand (&lt;code class=&quot;highlighter-rouge&quot;&gt;sdhand&lt;/code&gt;) took the initiative to organise some new &lt;a href=&quot;https://www.hacksoc.org&quot;&gt;HackSoc&lt;/a&gt; movie nights this year, and I’ve been helping with little bits of logistics. I’d been watching Apollo 13 but skipped Moon because I’d seen it recently.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d205.29712955826926!2d-1.0386286637597082!3d53.9533881908245!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e1!3m2!1sen!2suk!4v1489358465930&quot; width=&quot;600&quot; height=&quot;450&quot; frameborder=&quot;0&quot; style=&quot;border:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;It was at this bend on Yarburgh Way that I came off. Rather than my bicycle taking the turn it went over, my head slamming into the road surface and about a dozen different areas of me getting scraped, bruised or hurt. I don’t seem to have any bad injuries… but I’ve found it remarkable how incapacitated very bad scrapes on a knee and forearm can make you.&lt;/p&gt;

&lt;p&gt;I’m not particularly sure how it happened. My bicycle completely skidded out as if it had no grip, but it was far too warm for ice and I didn’t see any oil in the immediate aftermath. Given the extent of my injuries I have to wonder if my speed was just too high for the grip of the tyres - it’s an exceptionally tight bend.&lt;/p&gt;

&lt;p&gt;In any case, I was momentarily aware of the bicycle not moving correctly but then I don’t particularly remember anything until picking part of my bicycle bell off the road. I picked myself off the road after a time and was tremendously dazed for 20 minutes or so. A kind passerby walked with me for a time to check I was okay - I think they were worried about a concussion. Let’s face it: I was worried about a concussion.&lt;/p&gt;

&lt;p&gt;Now, Helmets aren’t exactly designed to protect against concussions. The foam is a bit too hard. But they do a good job of protection otherwise, and &lt;strong&gt;in this case I think that if the helmet didn’t take it the side of my head would have been in a horrible state - and me probably rather more seriously injured.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="York" /><summary type="html">One of my favourite things about York is how bicyclable it is. I grew up in the countryside but somewhere decidedly not safe to cycle from, so it’s a very welcome change. Aside from a couple of minor things it’s worked fine for the last 5 years. On Friday (2017-03-10) I had a bit of an accident.</summary></entry><entry><title type="html">Recursive Enum expression trees in Rust</title><link href="/2017/evco/" rel="alternate" type="text/html" title="Recursive Enum expression trees in Rust" /><published>2017-03-03T00:00:00+00:00</published><updated>2017-03-03T00:00:00+00:00</updated><id>/2017/evco</id><content type="html" xml:base="/2017/evco/">&lt;p&gt;I mused about an implementation of expression trees in Rust &lt;a href=&quot;https://46b.it/2017/rust-generating-syntax-trees/&quot;&gt;two days ago&lt;/a&gt;. This is to build a Genetic Programming library in Rust - an biologically-inspired approach to finding robust solutions to difficult problems.&lt;/p&gt;

&lt;p&gt;As discussed elsewhere I’ve become a keen fan of Rust. This language’s limited generics pose interesting problems for expressing and generating equations as described above.&lt;/p&gt;

&lt;p&gt;There are two common ways to represent a tree datastructure:
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The most obvious way is similar to a Linked List: allocate a separate portion of memory for each node in the tree and store pointers to the child/parent nodes. This makes it cheap to expand the tree and is a very natural representation.&lt;/li&gt;
  &lt;li&gt;The other way is to put the tree into an array. Map the parent-child relationships into indices and you can store a tree as a single block of memory. Adding nodes can require copying all this data into a larger region of memory but this has a variety of benefits such as cache locality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can define the semantics of a heap-allocated expression tree at compile time. Here’s a cut-down example - you can get and play with the &lt;a href=&quot;https://play.rust-lang.org/?gist=ddbde8dbeacb4f501995aef551f5ac7f&amp;amp;version=stable&amp;amp;backtrace=0&quot;&gt;full code here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PartialEq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `a + b`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `a - b`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `a * b`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `a / b`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `-a`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// `sin(a)`&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// evaluates to a constant 64-bit float&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// evaluates to an inputted 64-bit float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protected_div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// represent the equation `x` and evaluate for `x=5`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// represent the equation `x * sin(4.0)` and evaluate for `x=-7.3`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree2&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// represent the equation `x + sin(x)` and evaluate for `x=99.1` and `x=16.3`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree3&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;99.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree3&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This works for Genetic Programming and I’ve devised nice ways to randomly generate these trees - see the &lt;a href=&quot;https://github.com/46bit/evco/blob/master/examples/symbolic_regression.rs&quot;&gt;Symbolic Regression example&lt;/a&gt; and (this might not be obvious) &lt;a href=&quot;https://46bit.github.io/evco/evco/gp/tree/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;evco::gp::tree&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However this does limit flexibility. Using a generic tree datastructure would allow for easily introducing or removing sorts of nodes at compile time. I found that in DEAP this sort of flexibility helped for experimenting but tended not to stick around, so it might well be better.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s all for now, it’s time for bed. Sometime soon I’d like to write about &lt;a href=&quot;https://www.theguardian.com/world/2017/mar/01/silicon-valley-sexual-harassment-startups&quot;&gt;diversity experiences in tech&lt;/a&gt;, and how EVCO generates trees.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Hacking" /><summary type="html">I mused about an implementation of expression trees in Rust two days ago. This is to build a Genetic Programming library in Rust - an biologically-inspired approach to finding robust solutions to difficult problems. As discussed elsewhere I’ve become a keen fan of Rust. This language’s limited generics pose interesting problems for expressing and generating equations as described above. There are two common ways to represent a tree datastructure:</summary></entry><entry><title type="html">Introduction to Evolutionary Computing</title><link href="/2017/evolutionary-computing/" rel="alternate" type="text/html" title="Introduction to Evolutionary Computing" /><published>2017-03-02T00:00:00+00:00</published><updated>2017-03-02T00:00:00+00:00</updated><id>/2017/evolutionary-computing</id><content type="html" xml:base="/2017/evolutionary-computing/">&lt;p&gt;I took an Evolutionary Computation course last semester, &lt;a href=&quot;https://www.cs.york.ac.uk/postgraduate/modules/evco.html&quot;&gt;EVCO&lt;/a&gt;. This is a family of techniques where you simulate evolution to find good solutions to problems. Let’s watch an evolutionary process evolve vehicles that can get through a course:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uxourrlPlf8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;I’d like to thank &lt;a href=&quot;https://www.york.ac.uk/biology/research/ecology-evolution/daniel-franks/&quot;&gt;Dr Daniel Franks&lt;/a&gt; for a great course, enthusiastic teaching and many of the examples here.&lt;/p&gt;

&lt;p&gt;Let’s say you want to learn an equation that approximates a function. This is a simple example - one of my &lt;code class=&quot;highlighter-rouge&quot;&gt;evco&lt;/code&gt; examples &lt;a href=&quot;https://github.com/46bit/evco/blob/v0.2.1/examples/snake.rs&quot;&gt;evolves Snake players&lt;/a&gt;. We’ll use an evolutionary approach called Genetic Programming, which evolves trees representing expressions.&lt;!--more--&gt; So if you want to approximate some data you might:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Randomly generate a population of equations. Each equation forms a genome of sorts.&lt;/li&gt;
  &lt;li&gt;Test how good an approximation each equation (“individual”) gives.&lt;/li&gt;
  &lt;li&gt;Select the best equations to take forward.&lt;/li&gt;
  &lt;li&gt;Simulate sexual reproduction by swapping some randomly chosen parts of equations.&lt;/li&gt;
  &lt;li&gt;Simulate random mutations by randomly changing some terms in the equations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-effective-can-this-be-impressively-creative&quot;&gt;How effective can this be? Impressively creative.&lt;/h2&gt;

&lt;p&gt;This process can be excellent at finding creative solutions. Over sufficient timescales biological evolution is remarkably creative - just look at your own body.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/evolved-antenna.jpg&quot; alt=&quot;**NASA [evolved this antenna](https://en.wikipedia.org/wiki/Evolved_antenna) for a 2006 mission.**&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But I’ve found that tuning an evolutionary process is quite intensive: it takes a lot of programmer time and (the challenge) a lot of unguided experimentation.&lt;/p&gt;

&lt;p&gt;Evolution often reaches local maxima: it isn’t generating individuals which act in usefully different ways and so all individuals bottleneck around the same maximum fitness. As the best individuals are bred preferentially, when an innovation occurs the effect in improving average fitness can be dramatic. A biological example of this might be how life on Earth was single-celled for billions of years before multicellular eukaryotes came along.&lt;/p&gt;

&lt;p&gt;Six months has taught me that Evolutionary Computing is quite time-intensive but a brilliant hobby. These processes are stochastic: while subject to random variation they can be analysed. A lot of computation and analysis is necessary to understand how well a process is working.&lt;/p&gt;

&lt;h2 id=&quot;genetic-programming-in-python-with-deap&quot;&gt;Genetic Programming in Python with DEAP&lt;/h2&gt;

&lt;p&gt;York’s course used the &lt;a href=&quot;http://deap.readthedocs.io/en/master/&quot;&gt;DEAP&lt;/a&gt; library for Python. This feels something of a hobbyist’s tool: it contains implementations of the ingredients necessary for evolutionary computing but doesn’t get overly sophisticated.&lt;/p&gt;

&lt;p&gt;One drawback with DEAP is that a lot of examples and suggested tooling don’t work well with PyPy. (PyPy is a Just In Time compiler that can run many times faster than the reference CPython implementation.) For the assessment we had to evolve automated snake players, and it proved frustrating how much potential efficiency was lost.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a hobby project I decided to see how far I could get implementing things in Rust. I’ll talk some more about that tomorrow.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Hacking" /><summary type="html">I took an Evolutionary Computation course last semester, EVCO. This is a family of techniques where you simulate evolution to find good solutions to problems. Let’s watch an evolutionary process evolve vehicles that can get through a course: I’d like to thank Dr Daniel Franks for a great course, enthusiastic teaching and many of the examples here. Let’s say you want to learn an equation that approximates a function. This is a simple example - one of my evco examples evolves Snake players. We’ll use an evolutionary approach called Genetic Programming, which evolves trees representing expressions.</summary></entry><entry><title type="html">Securing legacy ColdFusion or: Why escape spaces against XSS?</title><link href="/2017/coldfusion-insecure-escape-spaces/" rel="alternate" type="text/html" title="Securing legacy ColdFusion or: Why escape spaces against XSS?" /><published>2017-03-01T00:00:00+00:00</published><updated>2017-03-01T00:00:00+00:00</updated><id>/2017/coldfusion-insecure-escape-spaces</id><content type="html" xml:base="/2017/coldfusion-insecure-escape-spaces/">&lt;p&gt;I’m in my Masters year at the moment, which means I have a lot fewer classes but a lot higher expectations in assignments. I’m also undertaking an MEng project (I’ll write about this sometime.) So I have a lot more unreserved time but a bit more work to do. I’ve been filling one day a week doing security and maintainance work on old ColdFusion web applications.&lt;/p&gt;

&lt;p&gt;ColdFusion is an old web technology that Macromedia put out. It’s like you implementated of PHP in HTML tags. For I have been working with it - trying to secure a large number of small webapps built with it in years gone by.&lt;/p&gt;

&lt;p&gt;There’s a bit of a problem with securing these legacy apps. They’re a mess, and &lt;strong&gt;ColdFusion is insecure by default.&lt;/strong&gt; Let’s take some typical Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;erb&lt;/code&gt; markup:
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;forename&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%= forename %&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= … %&amp;gt;&lt;/code&gt; tags automatically escape what’s being printed against XSS. The default case is the safe one. Outputting without escaping has to be explictly specified with the &lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt; function. Sadly, ColdFusion only autoescapes in special cases - and I’ve been warned that even then it isn’t bulletproof.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coldfusion&quot;&gt;&amp;lt;cfinput name=&quot;forename&quot; value=&quot;#form.forename#&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;People running ColdFusion are generally moving to the open source &lt;a href=&quot;@TODO&quot;&gt;Railo&lt;/a&gt; and &lt;a href=&quot;@TODO&quot;&gt;Lucee&lt;/a&gt; servers. These applied a sanity pass to what they should support.&lt;/p&gt;

&lt;p&gt;A decision I support is expecting the webapps to work and be secure on both old and new servers. This rules out using anything that was insecure in ColdFusion. It also rules out anything that was new in Railo/Lucee.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/coldfusion-insecure-intersection.png&quot; alt=&quot;Pictorial depiction of which solutions can be used.&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The intersection of secure and available in both is to import the &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&quot;&gt;OSASP ESAPI API&lt;/a&gt; from Java.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coldfusion&quot;&gt;&amp;lt;cfoutput&amp;gt;
    &amp;lt;input name=&quot;forename&quot; value=&quot;#request.esapi.encodeForHTMLAttribute(form.forename)#&quot;&amp;gt;
&amp;lt;/cfoutput&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yuck, huh? You might notice we’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;cfoutput&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tags now. As I’ll explain, this works around double-escaping issues.&lt;/p&gt;

&lt;h2 id=&quot;why-escape-spaces-against-xss&quot;&gt;Why Escape Spaces against XSS?&lt;/h2&gt;

&lt;p&gt;In one of these application I was escaping a &lt;code class=&quot;highlighter-rouge&quot;&gt;cfinput value&lt;/code&gt; with ESAPI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coldfusion&quot;&gt;&amp;lt;cfinput name=&quot;forename&quot; value=&quot;#request.esapi.encodeForHTMLAttribute(form.forename)#&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But on Lucee &lt;code class=&quot;highlighter-rouge&quot;&gt;cfinput&lt;/code&gt; is running &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeForHTMLAttribute&lt;/code&gt; itself and so we’re double-escaping &lt;code class=&quot;highlighter-rouge&quot;&gt;form.forename&lt;/code&gt;. So some characters got double escaped: ` ` (space) → &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#32;&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;amp;#32;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Stranger Things&lt;/code&gt; your prefilled form field now says &lt;code class=&quot;highlighter-rouge&quot;&gt;Stranger&amp;amp;#32;Things&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You wanted this: &lt;input value=&quot;Stranger&amp;#32;Things&quot; /&gt;&lt;br /&gt;
You get this: &lt;input value=&quot;Stranger&amp;amp;#32;Things&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This could have the approach of escaping almost any character outside &lt;code class=&quot;highlighter-rouge&quot;&gt;/a-z0-9/i&lt;/code&gt; but I was genuinely surprised that spaces are escaped. I found myself wondering why. Turns out there is a very good reason. Let’s go back to &lt;code class=&quot;highlighter-rouge&quot;&gt;erb&lt;/code&gt;, which escapes by default.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forename&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;forename&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See how there’s no quotation marks for the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute? HTML is happy without them. So a library that doesn’t escape spaces would leave you vulnerable.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forename = 'Stranger&lt;span class=&quot;ni&quot;&gt;&amp;amp;amp;&lt;/span&gt;Things onload=alert(&quot;XSS&quot;)'

&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Stranger&amp;amp;amp;Things&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alert('XSS')&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I think this fits into Defence In Depth. Attribute tags &lt;em&gt;should&lt;/em&gt; have the quotation marks, but mistakes happen and nobody is looking for that particular mistake. You have a problem when it only takes one missing quotation mark to open up your website to XSS. Escaping spaces is therefore quite important.&lt;/p&gt;

&lt;h2 id=&quot;salvaging-legacy-applications&quot;&gt;Salvaging legacy applications&lt;/h2&gt;

&lt;p&gt;I’ve found this a frustrating but enjoyable bit of work. Legacy is always a bit fascinating - at Archaeology Data Service I was reverse-engineering some ‘interesting’ ESRI XML formats.&lt;/p&gt;

&lt;p&gt;I don’t know how completely one can secure applications by hand when they’re messy, insecure by default, and number in the dozens. I’m doing my very best and making heavy use to regexes to check every last &lt;code class=&quot;highlighter-rouge&quot;&gt;#…#&lt;/code&gt; and use of &lt;code class=&quot;highlighter-rouge&quot;&gt;cf&lt;/code&gt; tags. But this is only a very small slice of ColdFusion’s weirdness: by default it acts like &lt;a href=&quot;https://en.wikibooks.org/wiki/PHP_Programming/Configuration:_Register_Globals&quot;&gt;PHP with &lt;code class=&quot;highlighter-rouge&quot;&gt;register_globals&lt;/code&gt; turned on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well-built software has lingering undiscovered security problems; with sufficient mess one is guaranteed to miss some. But my regexes and discipline does allow eliminating some error classes in near-entirety.&lt;/p&gt;

&lt;p&gt;I think my next step should be to fuzz these applications. That’s how they’ll be attacked, so I think it’s absolutely necessary to do it ourselves. I should also take a look into the &lt;code class=&quot;highlighter-rouge&quot;&gt;X-XSS-Protection&lt;/code&gt; header, but I’m guessing it isn’t something to rely upon.&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br /&gt;
— 46bit&lt;/p&gt;</content><author><name></name></author><category term="Hacking" /><summary type="html">I’m in my Masters year at the moment, which means I have a lot fewer classes but a lot higher expectations in assignments. I’m also undertaking an MEng project (I’ll write about this sometime.) So I have a lot more unreserved time but a bit more work to do. I’ve been filling one day a week doing security and maintainance work on old ColdFusion web applications. ColdFusion is an old web technology that Macromedia put out. It’s like you implementated of PHP in HTML tags. For I have been working with it - trying to secure a large number of small webapps built with it in years gone by. There’s a bit of a problem with securing these legacy apps. They’re a mess, and ColdFusion is insecure by default. Let’s take some typical Ruby erb markup:</summary></entry><entry><title type="html">Generating expression trees in Rust</title><link href="/2017/rust-generating-syntax-trees/" rel="alternate" type="text/html" title="Generating expression trees in Rust" /><published>2017-02-28T00:00:00+00:00</published><updated>2017-02-28T00:00:00+00:00</updated><id>/2017/rust-generating-syntax-trees</id><content type="html" xml:base="/2017/rust-generating-syntax-trees/">&lt;p&gt;I’ve been writing a lot of Rust. Since &lt;a href=&quot;https://github.com/Taneb&quot;&gt;\@Taneb&lt;/a&gt; persuaded me to try it the language has grown phenomenally on me. I’ve always shied away from getting too attached to tools and focused more on systems but for the first time since my early Ruby days I’ve become a language fanboy.&lt;/p&gt;

&lt;p&gt;While building my &lt;a href=&quot;https://github.com/46bit/evco&quot;&gt;Genetic Programming&lt;/a&gt; library I needed a convenient way to represent and generate syntax trees. More than anything I wanted users to write a minimum of code. I used an &lt;strong&gt;interesting but problematic&lt;/strong&gt; Recursive Enum approach that’s worth discussing.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a very neat representation of a syntax tree for basic mathematics. One can express math quite simply:
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// (17.2 × 50.0) ÷ (9.0 - 1.5)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;17.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we want to evaluate a tree into an output &lt;code class=&quot;highlighter-rouge&quot;&gt;f64&lt;/code&gt;. Here’s a simple recursion:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// In practice I tend to implement a `protectedDiv` which avoids `NaN`.&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;taking-inputs&quot;&gt;Taking inputs&lt;/h2&gt;

&lt;p&gt;But the tree has a fixed value! That sucks. Let’s make it a real equation:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Eval now takes an input!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// In practice I tend to implement a `protectedDiv` which avoids `NaN`.&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;going-generic-with-evaluable&quot;&gt;Going generic with &lt;code class=&quot;highlighter-rouge&quot;&gt;Evaluable&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We can implement a trait to represent an evaluable type and implement it this way. I’m considering an approach like this to genericise over tree-based genetic agents and other forms.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evaluable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evaluable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// In practice I tend to implement a `protectedDiv` which avoids `NaN`.&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;generation&quot;&gt;Generation&lt;/h2&gt;

&lt;p&gt;Say we implement a function to generate a random nonterminal and a function to generate a random terminal. A new type that chooses whether to generate a nonterminal or terminal can then control various properties of generated trees. The details are a bit too lengthy to put here but this is something that &lt;a href=&quot;https://docs.rs/evco/0.2.1/evco/gp/tree/index.html&quot;&gt;evco’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Tree&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TreeGen&lt;/code&gt;&lt;/a&gt; quite carefully perform.&lt;/p&gt;

&lt;h2 id=&quot;practical-implementation&quot;&gt;Practical implementation&lt;/h2&gt;

&lt;p&gt;I find this approach very pretty but it’s quite unsuitable to expect other people to implement to use a library. It’s &lt;a href=&quot;https://github.com/46bit/evco/blob/669dc40d2e4e3681e0f3d0c97c70fb0157784886/examples/symbolic_regression.rs#L27-L100&quot;&gt;at least 50 ugly lines of code&lt;/a&gt; for users of my library to implement methods to generate the tree.&lt;/p&gt;

&lt;p&gt;Having other people implement these methods also removes much hope of keeping things tail-recursive. Recursive datastructures are notorious for operations upon them blowing the stack and crashing the program.&lt;/p&gt;

&lt;p&gt;I implemented tail-recursive iteration &lt;a href=&quot;https://github.com/46bit/evco/blob/669dc40d2e4e3681e0f3d0c97c70fb0157784886/src/gp/tree/mod.rs#L98-L121&quot;&gt;inside the library&lt;/a&gt; but it’s too complex for third-parties to replicate without risking bugs.&lt;/p&gt;

&lt;h2 id=&quot;custom-derive&quot;&gt;Custom derive&lt;/h2&gt;

&lt;p&gt;One way around this issue of people having to implement tedious methods is &lt;a href=&quot;https://doc.rust-lang.org/book/procedural-macros.html&quot;&gt;a custom derivation&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;proc_macro_derive&lt;/code&gt;.) The macro could analyse the types in the tree, identify enum variants as terminal vs nonterminal, and generate the methods accordingly.&lt;/p&gt;

&lt;p&gt;This has implementation questions. A typical program doesn’t want to be provided with a random &lt;code class=&quot;highlighter-rouge&quot;&gt;f64&lt;/code&gt; - it wants one in a particular range. So we could require users to implement new types to wrap that, or allow attributes to mark the range to use:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratableTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#[evco(range&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-10..10&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;alternative-better-implementations&quot;&gt;Alternative, better implementations&lt;/h2&gt;

&lt;p&gt;The biggest irritation with the datastructure is that accessing a particular node takes &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; operations because you have to traverse the entire tree to find it.&lt;/p&gt;

&lt;p&gt;One can take an approach like a &lt;a href=&quot;https://en.wikipedia.org/wiki/B-tree&quot;&gt;B-tree&lt;/a&gt; to optimise searching for elements. Sadly this doesn’t suit evolutionary computation very much: mutation is about as common as accessing and trees cannot be rebalanced.&lt;/p&gt;

&lt;p&gt;So it would be better to store trees as something other than a recursive datastructure where each node is in its own allocated memory.&lt;/p&gt;

&lt;h2 id=&quot;heap&quot;&gt;Heap&lt;/h2&gt;

&lt;p&gt;A common means of representing trees on a computer is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Heap_(data_structure)&quot;&gt;Heap datastructure&lt;/a&gt;. This structures nodes into an array thus getting better cache locality, quicker access times, etc. The problem is that the enum we have is inherently a recursive structure.&lt;/p&gt;

&lt;p&gt;Let’s try this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We could build and evaluate variants as we go, using this and the heap. But how do we indicate stored data versus arguments? We could supply stored data as a reference maybe?&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This isn’t very pretty. One option would be that &lt;code class=&quot;highlighter-rouge&quot;&gt;f64&lt;/code&gt; inherently is generated and &lt;code class=&quot;highlighter-rouge&quot;&gt;Float&lt;/code&gt; becomes unnecessary.&lt;/p&gt;

&lt;h2 id=&quot;types&quot;&gt;Types&lt;/h2&gt;

&lt;p&gt;A further issue to consider: none of this uses generic types. All this only passes around &lt;code class=&quot;highlighter-rouge&quot;&gt;f64&lt;/code&gt; and nothing else. I guess we could indicate return types by requiring mutable pointers? The code to make this work might be ugly but it’ll be custom derived after all.&lt;/p&gt;

&lt;p&gt;This allows specifying return type of each node, but generation logic would have to specify the tree’s root node to get a consistent type out the top of the trees:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l + r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l - r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l × r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// l ÷ r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;IfEq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s a pain.&lt;/p&gt;</content><author><name></name></author><category term="Hacking" /><summary type="html">I’ve been writing a lot of Rust. Since \@Taneb persuaded me to try it the language has grown phenomenally on me. I’ve always shied away from getting too attached to tools and focused more on systems but for the first time since my early Ruby days I’ve become a language fanboy. While building my Genetic Programming library I needed a convenient way to represent and generate syntax trees. More than anything I wanted users to write a minimum of code. I used an interesting but problematic Recursive Enum approach that’s worth discussing. enum Equation { Add(Box&amp;lt;Equation&amp;gt;, Box&amp;lt;Equation&amp;gt;), // l + r Sub(Box&amp;lt;Equation&amp;gt;, Box&amp;lt;Equation&amp;gt;), // l - r Mul(Box&amp;lt;Equation&amp;gt;, Box&amp;lt;Equation&amp;gt;), // l × r Div(Box&amp;lt;Equation&amp;gt;, Box&amp;lt;Equation&amp;gt;), // l ÷ r Float(f64), // n } This is a very neat representation of a syntax tree for basic mathematics. One can express math quite simply:</summary></entry></feed>
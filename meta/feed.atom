<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://46b.it/meta/feed.atom" rel="self" type="application/atom+xml" /><link href="https://46b.it/" rel="alternate" type="text/html" /><updated>2021-04-06T01:15:11+00:00</updated><id>https://46b.it/meta/feed.atom</id><title type="html">46b.it</title><entry><title type="html">Getting alerted when cycle paths flood: part two</title><link href="https://46b.it/2021/getting-alerted-when-cycle-paths-flood-part-two/" rel="alternate" type="text/html" title="Getting alerted when cycle paths flood: part two" /><published>2021-03-05T00:00:00+00:00</published><updated>2021-03-05T00:00:00+00:00</updated><id>https://46b.it/2021/getting-alerted-when-cycle-paths-flood-part-two</id><content type="html" xml:base="https://46b.it/2021/getting-alerted-when-cycle-paths-flood-part-two/">&lt;p&gt;I recently moved back to York, a city I absolutely love. One of the best things about living here is cycling. But York has two rivers, one of which brings rain from hills a long way away. Some of the best cycle routes can flood after rainfall when the rivers rise.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;This post is aimed is at software engineers with DevOps skills who already run Prometheus and Grafana. If you don’t have those skills then I’d be interested in figuring out how to make this more widely available–contact me.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;&lt;a href=&quot;/2021/getting-alerted-when-cycle-paths-flood/&quot;&gt;the first post&lt;/a&gt;&lt;/strong&gt; I explained how to get River Water Level data exposed in a way that Prometheus can scrape. In this post we’ll get Prometheus scraping the data, and then look at how we can get alerts and see the data in Grafana.&lt;/p&gt;

&lt;h2 id=&quot;scraping-river-water-levels-into-prometheus&quot;&gt;Scraping river water levels into Prometheus&lt;/h2&gt;

&lt;p&gt;I have deployed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flood-exporter&lt;/code&gt; we built in &lt;a href=&quot;/2021/getting-alerted-when-cycle-paths-flood/&quot;&gt;my last post&lt;/a&gt;, and it’s running at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flood-exporter.k8s.46b.it&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Scraping this endpoint into Prometheus is simple (since I’m very familiar with Prometheus.) Here’s the YAML config:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scrape_configs:
- job_name: river_level_metrics
  scheme: https
  static_configs:
  - targets:
    - flood-exporter.k8s.46b.it
  metrics_path: /probe
  scrape_interval: 180s
  params:
    target:
      - https://environment.data.gov.uk/flood-monitoring/id/stations/L2406.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://environment.data.gov.uk/flood-monitoring/id/stations/L2406.json&lt;/code&gt; is specific to York. See &lt;a href=&quot;/2021/getting-alerted-when-cycle-paths-flood/&quot;&gt;the previous post&lt;/a&gt; to understand how to get river data for a different place.&lt;/p&gt;

&lt;p&gt;This should “just work” :)&lt;/p&gt;

&lt;p&gt;There are three metrics available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;river_level_measurement&lt;/code&gt;, storing the current river level in metres&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;river_level_min_on_record&lt;/code&gt;, storing the lowest river level that’s been measured&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;river_level_miaxon_record&lt;/code&gt;, storing the highest river level that’s been measured&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In York the river level is updated every 15 minutes, so the Prometheus config only bothers to scrape every few minutes. I don’t know if it’s different elsewhere.&lt;/p&gt;

&lt;h2 id=&quot;building-a-dashboard-in-grafana&quot;&gt;Building a dashboard in Grafana&lt;/h2&gt;

&lt;p&gt;Now that the data’s in Prometheus, we’re free to use it in a Grafana dashboard.&lt;/p&gt;

&lt;p&gt;Some of the Grafana dashboard is going to be specific to York, but I’ll give you my config and you can tune it to your needs.&lt;/p&gt;

&lt;p&gt;The river levels used for these alerts are from &lt;a href=&quot;http://nosearmy.com/isitflooded/&quot;&gt;nosearmy.com/isitflooded/&lt;/a&gt;. All credit to them.&lt;/p&gt;

&lt;p&gt;Here’s what my dashboard looks like when things are OK:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/writing/york-cycle-path-dashboard-happy.png&quot;&gt;&lt;img src=&quot;/assets/writing/york-cycle-path-dashboard-happy.png&quot; alt=&quot;A Grafana dashboard showing that the River Ouse is low and there are no flooded cycle paths&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s what my dashboard looks like when there’s a flood (only simulated as there hasn’t been one since I deployed this):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/writing/york-cycle-path-dashboard-flooding.png&quot;&gt;&lt;img src=&quot;/assets/writing/york-cycle-path-dashboard-flooding.png&quot; alt=&quot;A Grafana dashboard showing that the River Ouse is high and there are several deeply flooded cycle paths&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The really cool thing about this is that the right-hand side panel tells me how deeply paths are flooded. On a bicycle I can go through a few centimetres, but not 20 or 30cm.&lt;/p&gt;

&lt;p&gt;You can get the source code for my Grafana dashboard at &lt;a href=&quot;https://gist.github.com/46bit/a05a6d5bd1f2dc9a4bdfa0c87d328452&quot;&gt;gist.github.com/46bit/a05a6d5bd1f2dc9a4bdfa0c87d328452&lt;/a&gt;. Install it into your Grafana and it should just work, provided you’ve got Prometheus scraping the data.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-alerts&quot;&gt;Setting up alerts&lt;/h2&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://grafana.com/products/cloud/&quot;&gt;Grafana Cloud&lt;/a&gt; to run my Grafana, so it’s easier to use Grafana Alerts than to configure Alertmanager.&lt;/p&gt;

&lt;p&gt;The Grafana dashboard above includes a bunch of alerts for each of the different paths. I’ve got them forwarding messages to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cycling&lt;/code&gt; channel in York-specific Slack group that I’m in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/writing/york-cycle-path-slack-alert.png&quot; alt=&quot;A Slack message posted by Grafana to warn that a York cycle path is flooded&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rather than trying to teach you how to use Grafana Alerts, install my dashboard and tweak it for your purposes. Expand the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path flood alerts&lt;/code&gt; row at the bottom of the dashboard and you can edit the alerts in there.&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently moved back to York, a city I absolutely love. One of the best things about living here is cycling. But York has two rivers, one of which brings rain from hills a long way away. Some of the best cycle routes can flood after rainfall when the rivers rise.</summary></entry><entry><title type="html">Getting alerted when cycle paths flood</title><link href="https://46b.it/2021/getting-alerted-when-cycle-paths-flood/" rel="alternate" type="text/html" title="Getting alerted when cycle paths flood" /><published>2021-03-04T00:00:00+00:00</published><updated>2021-03-04T00:00:00+00:00</updated><id>https://46b.it/2021/getting-alerted-when-cycle-paths-flood</id><content type="html" xml:base="https://46b.it/2021/getting-alerted-when-cycle-paths-flood/">&lt;p&gt;I recently moved back to York, a city I absolutely love. One of the best things about living here is cycling. But York has two rivers, one of which brings rain from hills a long way away. Some of the best cycle routes can flood after rainfall when the rivers rise.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;There is already a very useful website for seeing which routes in York are flooded: &lt;a href=&quot;http://nosearmy.com/isitflooded/&quot;&gt;nosearmy.com/isitflooded/&lt;/a&gt;. But it’s annoying having to check my phone before I go cycling–especially when I’m trying to quickly fit six miles in at lunchtime. I’d rather get alerts when cycle paths flood.&lt;/p&gt;

&lt;p&gt;I have a Grafana and Prometheus monitoring stack, so I’m going to use those to notify me. This makes sense if you’re an engineer with DevOps skills; less so for an ordinary person.&lt;/p&gt;

&lt;h2 id=&quot;where-to-find-data-on-river-water-levels&quot;&gt;Where to find data on river water levels&lt;/h2&gt;

&lt;p&gt;To do this I’m going to use freely available River Level data from the Environment Agency. Data for York’s main river level station, Viking Recorder, is online at &lt;a href=&quot;https://check-for-flooding.service.gov.uk/station/8208&quot;&gt;check-for-flooding.service.gov.uk/station/8208&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s also an API. It uses different ID numbers, but you can translate IDs. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLOIid&lt;/code&gt; field on &lt;a href=&quot;https://environment.data.gov.uk/flood-monitoring/id/stations?_limit=50000&quot;&gt;environment.data.gov.uk/flood-monitoring/id/stations?_limit=50000&lt;/a&gt; matches the human-readable pages, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wiskiID&lt;/code&gt; field is what to use for the API.&lt;/p&gt;

&lt;p&gt;You can then fetch the latest river level reading for your station from &lt;a href=&quot;https://environment.data.gov.uk/flood-monitoring/id/stations/L2406.json&quot;&gt;environment.data.gov.uk/flood-monitoring/id/stations/L2406.json&lt;/a&gt;. There’s a few API endpoints to choose from but this one has the most metadata.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-the-data-into-prometheus&quot;&gt;How to get the data into Prometheus&lt;/h2&gt;

&lt;p&gt;Next challenge is how to get this into Prometheus. The river level API returns JSON, so we can use the off-the-shelf &lt;a href=&quot;https://github.com/prometheus-community/json_exporter&quot;&gt;github.com/prometheus-community/json_exporter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are many different choices in how to file metrics from this JSON. I’ve ended up assuming there’ll only be one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latestReading&lt;/code&gt; for each station–that’s true at this station, but you should see if it’s true for yours.&lt;/p&gt;

&lt;p&gt;The final config I’ve made for the json exporter is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
metrics:
- name: river_level
  path: &quot;{ .items }&quot;
  type: object
  values:
    measurement: &quot;{ .measures[*].latestReading.value }&quot;
    max_on_record: &quot;{ .stageScale.maxOnRecord.value }&quot;
    min_on_record: &quot;{ .stageScale.minOnRecord.value }&quot;
  labels:
    rloi_id: &quot;{ .RLOIid }&quot;
    wiski_id: &quot;{ .wiskiID }&quot;
    name: &quot;{ .label }&quot;
    town: &quot;{ .town }&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start up the JSON Exporter using that config:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./json_exporter --config.file config.yml &amp;amp;
[…]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then scrape the exporter, providing the station data URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl &quot;http://localhost:7979/probe?target=https://environment.data.gov.uk/flood-monitoring/id/stations/L2406.json&quot;
# HELP river_level_measurement river_level
# TYPE river_level_measurement untyped
river_level_measurement{rloi_id=&quot;8208&quot;,station_name=&quot;Viking Recorder&quot;,town=&quot;York&quot;,wiski_id=&quot;L2406&quot;} 0.649

# HELP river_level_min_on_record river_level
# TYPE river_level_min_on_record untyped
river_level_min_on_record{rloi_id=&quot;8208&quot;,station_name=&quot;Viking Recorder&quot;,town=&quot;York&quot;,wiski_id=&quot;L2406&quot;} -0.082

# HELP river_level_max_on_record river_level
# TYPE river_level_max_on_record untyped
river_level_max_on_record{rloi_id=&quot;8208&quot;,station_name=&quot;Viking Recorder&quot;,town=&quot;York&quot;,wiski_id=&quot;L2406&quot;} 5.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately the JSON Exporter doesn’t support measurement units. It does support help text but I don’t need that for myself (something to do later.) What I have done is configured some useful labels, including the IDs mentioned up the top of this article.&lt;/p&gt;

&lt;p&gt;I’ve made a public Docker image for this if you want to re-use it: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghcr.io/46bit/flood-exporter&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;The next step is to configure Prometheus to scrape that endpoint, and Grafana to render some pretty graphics and send alerts. I cover that in &lt;strong&gt;&lt;a href=&quot;/2021/getting-alerted-when-cycle-paths-flood-part-two/&quot;&gt;my next post&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently moved back to York, a city I absolutely love. One of the best things about living here is cycling. But York has two rivers, one of which brings rain from hills a long way away. Some of the best cycle routes can flood after rainfall when the rivers rise.</summary></entry><entry><title type="html">How responsible are we for the feelings of others?</title><link href="https://46b.it/2018/how-responsible-are-we-for-others/" rel="alternate" type="text/html" title="How responsible are we for the feelings of others?" /><published>2018-10-18T00:00:00+00:00</published><updated>2018-10-18T00:00:00+00:00</updated><id>https://46b.it/2018/how-responsible-are-we-for-others</id><content type="html" xml:base="https://46b.it/2018/how-responsible-are-we-for-others/">&lt;p&gt;I’d like to publish more of my writing, and so this post is somewhat shorter and stream-of-consciousness than I’ve written before.&lt;/p&gt;

&lt;p&gt;Today I’m discussing what we owe to each other and what we owe to ourselves. In particular, how responsible are we for the feelings of others?&lt;/p&gt;

&lt;p&gt;One school of thought is that we are entirely responsible. In this world we are wholly responsible for how our messages are received. Another model is that we are not responsible at all: we are responsible for nothing more than our intent. These are two extremes.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I’ve experienced both of these extremes of responsibility and I think that they can be effective adaptations to toxic situations. For instance, when someone is causing regular pain and not responding to complaints, your responsibility to them must drop if you are to avoid self-blame. But I think these extremes are both toxic.&lt;/p&gt;

&lt;!-- In an ideal world I imagine we would be highly-empathic, but not merely with other humans. We'd also be empathic for larger-scale, longer-term things--able to act decisively on future issues where current humans struggle for action. We wouldn't be frustrated, because our feelings would be innately accepted by others--not necessarily acted upon, but recognised and considered. Yet we don't live in that world, and we are all flawed. We get worn out, impatient, nervous, optimistic, and many other factors that deplete the concentration it can take to listen and appreciate other people. --&gt;

&lt;p&gt;I’ve concluded that we get to choose. Part of forming and sustaining relationships is bonding and differentiation: deciding what to share and what to differ on. And part of this is deciding in what ways we will care and empathise for the other as much as for ourselves, and in which ways we will care for ourselves most.&lt;/p&gt;

&lt;p&gt;For a long time at University I tried to treat others as I would like to be treated. But I found this gradually wore me down: a few people grew used to me being responsible for them because I was so consistent, but as other loads on me increased I struggled more with the burden. Eventually I would drop that responsibility entirely to focus on myself, with a suddenness that naturally hurt their feelings.&lt;/p&gt;

&lt;p&gt;Black-and-white thinking is often dangerous, and this topic is no exception. To be entirely responsible for other’s feelings is to be overresponsible, and to start to consider them an extension of yourself. To be solely responsible for your own feelings is to be self-absorbed and isolated. With those friends, I didn’t accept that there are shades-of-grey to these things. I didn’t properly set boundaries, and I didn’t properly accept myself.&lt;/p&gt;

&lt;p&gt;What I’ve been trying to do more recently is visualise how responsible I’m willing to be in each interaction, and try to separate that from how accountable I fear I might be. Being mindful of this gives me lots of useful information about what I like and dislike. It also warns me of situations which seem peaceful but where I need to be wary.&lt;/p&gt;

&lt;p&gt;I worried when posting this. I felt I hadn’t established at the beginning how much I personally value empathy. But that makes this post an experiment in itself.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’d like to publish more of my writing, and so this post is somewhat shorter and stream-of-consciousness than I’ve written before. Today I’m discussing what we owe to each other and what we owe to ourselves. In particular, how responsible are we for the feelings of others? One school of thought is that we are entirely responsible. In this world we are wholly responsible for how our messages are received. Another model is that we are not responsible at all: we are responsible for nothing more than our intent. These are two extremes.</summary></entry><entry><title type="html">The counterintuition of how leaders grow</title><link href="https://46b.it/2018/counterintuitive-leadership-growth/" rel="alternate" type="text/html" title="The counterintuition of how leaders grow" /><published>2018-09-21T00:00:00+00:00</published><updated>2018-09-21T00:00:00+00:00</updated><id>https://46b.it/2018/counterintuitive-leadership-growth</id><content type="html" xml:base="https://46b.it/2018/counterintuitive-leadership-growth/">&lt;p&gt;My background is in small organisations: some fast-moving startups, but also some slower-moving organisations like research councils. Since I joined GDS I’ve been getting used to a larger organisation. A big part of that for me has been recognising how important leaders become in organising a large group of people. But a big part of that has been seeing how much help or harm leaders can do.&lt;/p&gt;

&lt;p&gt;GDS has shown me people who I look up to a lot. Leaders who treat people with respect, are keen to grow people around them, and yet can manage effectively and see their team deliver lots. A lot of them are LGBTQ, or not male, and these traits definitely go along with forms of servant-ish leadership I appreciate.&lt;/p&gt;

&lt;p&gt;My naive assumption for a long time was that these people were so brilliant because they’d learned it in equally brilliant, safe conditions. And yet from listening to them I’ve realised that isn’t true at all.&lt;/p&gt;

&lt;p&gt;Wonderful leaders seem to have learned from failure. Even to have ‘born’ in failure. Many of the leaders I admire started leading in difficult situations that made them feel overresponsible, unsupported and unhappy.&lt;/p&gt;

&lt;p&gt;My past has lots of examples where selfishness seemed to lead people to power who were intended to abuse it. I’m a believer that the best leaders are those who aren’t self-centered and wouldn’t seek power for themselves.&lt;/p&gt;

&lt;p&gt;But that doesn’t necessarily look so straighforward in the real world. Many people, such as those in marginalised groups or who don’t try to project masculine-style confidence, don’t get offered chances that they obviously are capable of attempting. So getting that eventually requires some sort of opening.&lt;/p&gt;

&lt;p&gt;I talked about this at length with some very experienced people. Their response was reassuring: that different people are motivated by different things, but that sometimes for anyone to get what they deserve they have to be quite assertive about it. And in particular, that &lt;em&gt;personal ambition is OK.&lt;/em&gt; I suspect that will seem obvious to many readers, and it might feel frightening that I’m suggesting otherwise, but chat with me sometime.&lt;/p&gt;

&lt;p&gt;So one can look for leadership opportunities. I’m vaguely convinced now that being ambitious like that is not unhealthily selfish. Finding the sort of vacuum that one can start healing is a matter of luck, but I was taught a new form of trust. If you’re demonstrating skills then you can trust people to start using those skills. Everyone’s doing their best, everyone needs help. And for awhile that’s probably going to be in a way that gives little responsibility but requires lots of engagement, but that’s how you show what you can do. And it’s how you can fail in a low-consequence situation.&lt;/p&gt;

&lt;p&gt;So, the counterintuition is: &lt;strong&gt;some of the best and most sensitive and effective leaders actually learned that from bad, insensitive, ineffective situations that they felt determined to fix.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(At this point I realise I’m talking about myself.)&lt;/p&gt;</content><author><name></name></author><summary type="html">My background is in small organisations: some fast-moving startups, but also some slower-moving organisations like research councils. Since I joined GDS I’ve been getting used to a larger organisation. A big part of that for me has been recognising how important leaders become in organising a large group of people. But a big part of that has been seeing how much help or harm leaders can do. GDS has shown me people who I look up to a lot. Leaders who treat people with respect, are keen to grow people around them, and yet can manage effectively and see their team deliver lots. A lot of them are LGBTQ, or not male, and these traits definitely go along with forms of servant-ish leadership I appreciate. My naive assumption for a long time was that these people were so brilliant because they’d learned it in equally brilliant, safe conditions. And yet from listening to them I’ve realised that isn’t true at all. Wonderful leaders seem to have learned from failure. Even to have ‘born’ in failure. Many of the leaders I admire started leading in difficult situations that made them feel overresponsible, unsupported and unhappy. My past has lots of examples where selfishness seemed to lead people to power who were intended to abuse it. I’m a believer that the best leaders are those who aren’t self-centered and wouldn’t seek power for themselves. But that doesn’t necessarily look so straighforward in the real world. Many people, such as those in marginalised groups or who don’t try to project masculine-style confidence, don’t get offered chances that they obviously are capable of attempting. So getting that eventually requires some sort of opening. I talked about this at length with some very experienced people. Their response was reassuring: that different people are motivated by different things, but that sometimes for anyone to get what they deserve they have to be quite assertive about it. And in particular, that personal ambition is OK. I suspect that will seem obvious to many readers, and it might feel frightening that I’m suggesting otherwise, but chat with me sometime. So one can look for leadership opportunities. I’m vaguely convinced now that being ambitious like that is not unhealthily selfish. Finding the sort of vacuum that one can start healing is a matter of luck, but I was taught a new form of trust. If you’re demonstrating skills then you can trust people to start using those skills. Everyone’s doing their best, everyone needs help. And for awhile that’s probably going to be in a way that gives little responsibility but requires lots of engagement, but that’s how you show what you can do. And it’s how you can fail in a low-consequence situation. So, the counterintuition is: some of the best and most sensitive and effective leaders actually learned that from bad, insensitive, ineffective situations that they felt determined to fix. (At this point I realise I’m talking about myself.)</summary></entry><entry><title type="html">I’m finding London easier</title><link href="https://46b.it/2018/finding-london-easier/" rel="alternate" type="text/html" title="I'm finding London easier" /><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><id>https://46b.it/2018/finding-london-easier</id><content type="html" xml:base="https://46b.it/2018/finding-london-easier/">&lt;p&gt;&lt;a href=&quot;/2017/finding-london-hard/&quot;&gt;In December I wrote&lt;/a&gt; about how painful I had found it to leave York, move to London by myself, and start putting this new phase of life together. And this seemed strange, because I was evidently doing well and enjoying work and I did not &lt;em&gt;objectively&lt;/em&gt; feel lonely.&lt;/p&gt;

&lt;p&gt;I’ve been learning about an area of psychology called attachment theory, and it turns out that people don’t work that way. Something called the Dependency Paradox describes how people without reliable relationships can struggle to feel comfortable in their independence, whereas once those relationships are settled and reliable the same people will be independent and unconcerned. This lack is why I was feeling so upset for a time, but also why things have felt dramatically lighter in recent months.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It’s been hard. I’ve been pursuing a lot of difficult angles. At times I’ve been talking about the same areas with multiple people: the past with my therapist, the present with my mentors, and the future with my line manager. This seems like one of the side effects of a relationship-based culture.&lt;/p&gt;

&lt;p&gt;I don’t know where I first came across the concept of a relationship-based culture, but I’ve found it useful in understanding why I like GDS whereas other large organisations seemed quite oppressive from the outside. Rather than following a strict hierarchy or playing fixed roles, we do our best to contribute as best we can in the ways that we best can. Much of that is by forming strong relationships with those around us, and that directly links to the relationships going on in our life outside work.&lt;/p&gt;

&lt;p&gt;This can go too far. I cringe when people describe hierarchied work-focused groups as being a community, because they intentionally have &lt;em&gt;formal&lt;/em&gt; power imbalances and that’s not what I expect from a community. In practice our tech communities feel more like guilds. It’s a tricky issue: to call them communities is to minimise the power imbalances; to call them guilds risks maximising it.&lt;/p&gt;

&lt;p&gt;Power is an area I’ve been learning to understand more. A few months I was remarked to that my opinions often ‘saved lives’ and I could do with being more persuasive. This took me out of nowhere, because I felt that I did contribute my opinions fully. But as best I understand it, this is because human beings often respond more to displays of confidence than to the reasoned quality of ideas. I despair a little at humanity over this but I also recognise that people get tired, are doing their best, and I can’t change humanity. So I had to get better at that–and &lt;em&gt;then&lt;/em&gt; I could use that persuasion to ensure that quieter but better ideas got heard (not just my own–those of others!) This inner frustration is ironic, considering how much time I spent trying to explain to engineers that people are not purely rational and act in paradoxical ways if you do not appreciate the role of their personalities. But, well, I am autistic.&lt;/p&gt;

&lt;p&gt;Some of this makes me uncomfortable. Knowing how to communicate assertively can be repurposed to communicate aggressively or manipulatively, and our own moral compass and the reactions of others is all we have to go on. Human interaction is often in shades of grey. Observe how common extremely assertive (and aggressive) communication is amongst London commuters. This is a bit dreadful for someone from quiet Northern cities, but it is efficient because it stops things getting personal, clearly sets expectations, and keeps people focused on getting where they are going. A mentor describes the difference between assertion and aggression as, “assertiveness is getting your strongly held opinions across without suppressing those of others.”&lt;/p&gt;

&lt;p&gt;These areas are interesting. They’ve kept me busy. I have some clear goals now for how to develop my people, organisational and leadership skills further. Best of all I have three people that I feel like I can rely on seeing every week or two, and thirty I can rely on seeing about. Those attachments are important, because &lt;a href=&quot;https://www.psychologytoday.com/gb/blog/are-we-born-racist/201205/the-dependency-paradox-why-people-are-not-feet&quot;&gt;people are not like feet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It had been quite distressing to see my insecurities rising since I moved down. But it’s made me stronger. I know my triggers a lot better now, and the traumatic experiences behind them. I’ve also learned how much of a liability unhappy relationships can be, and have an inner sense-of-safety to help me exit them.&lt;/p&gt;

&lt;p&gt;I know from experience and understanding that &lt;a href=&quot;https://www.psychologytoday.com/gb/blog/fulfillment-any-age/201501/why-insecure-people-make-such-bad-bosses&quot;&gt;insecure people can make terrible leaders&lt;/a&gt;. Power imbalances can bring out their worst. But those experiences have been with people who were unaware, in denial, or not seeing someone about it. I &lt;em&gt;know&lt;/em&gt; my self-esteem needs work, and I’m working on it.&lt;/p&gt;</content><author><name></name></author><summary type="html">In December I wrote about how painful I had found it to leave York, move to London by myself, and start putting this new phase of life together. And this seemed strange, because I was evidently doing well and enjoying work and I did not objectively feel lonely. I’ve been learning about an area of psychology called attachment theory, and it turns out that people don’t work that way. Something called the Dependency Paradox describes how people without reliable relationships can struggle to feel comfortable in their independence, whereas once those relationships are settled and reliable the same people will be independent and unconcerned. This lack is why I was feeling so upset for a time, but also why things have felt dramatically lighter in recent months.</summary></entry><entry><title type="html">Weeknote 3</title><link href="https://46b.it/2018/weeknote-3/" rel="alternate" type="text/html" title="Weeknote 3" /><published>2018-06-15T00:00:00+00:00</published><updated>2018-06-15T00:00:00+00:00</updated><id>https://46b.it/2018/weeknote-3</id><content type="html" xml:base="https://46b.it/2018/weeknote-3/">&lt;p&gt;I missed a weeknote. Interesting things happened but I went through a period of being down and having crippling hayfever.&lt;/p&gt;

&lt;h2 id=&quot;i-learned-lots-about-leading-in-an-agile-environment&quot;&gt;I learned lots about leading in an agile environment&lt;/h2&gt;

&lt;p&gt;A difficulty with working at GDS is how exposing collaborative ways of working can be. There are lots of potential triggers, like teams expecting pair programming and not building in ay recharge time. There are lots of things one has to work with, such as being overwhelmed by bright office lights.&lt;/p&gt;

&lt;p&gt;I’ve learned to work around these things. Finding recharge time can be a question of seeing yourself as being &lt;em&gt;in&lt;/em&gt; the team rather than &lt;em&gt;of&lt;/em&gt; it. Bright office lights can be mitigated by polarising sunglasses, and hopefully by something more stylish in time. And I’ve learned a lot along the way.&lt;/p&gt;

&lt;p&gt;We seem to learn more from unpleasant experiences than from enjoyable ones. It’s hard to know &lt;em&gt;why&lt;/em&gt; something successful works without asking a lot of questions, and some questions risk surfacing lingering issues and creating drama. I suppose that the people we &lt;a href=&quot;https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development#Storming&quot;&gt;storm with&lt;/a&gt; can become deeply respected and appreciated friends as things normalise.&lt;/p&gt;

&lt;p&gt;I’ve been talking to quite a few Delivery Managers and Product Managers, and I shadowed &lt;a href=&quot;https://twitter.com/probablyreading&quot;&gt;one of my favouritest Delivery Managers&lt;/a&gt;. I’m fascinating by the agile team structures that we use, and their deliberate structures. I had always felt that stereotyping people into roles was oppressive, and would be suffocating to roleplay. But these structures work &lt;em&gt;because&lt;/em&gt; people divide responsibilities—not because people are necessarily lacking in relevant abilities. With divided responsibilities comes more focus, clearer lines to collaborate along, and thus more effective teams. When you understand your role you &lt;em&gt;can&lt;/em&gt; subvert it in ways that work for you (for instance, some Delivery Managers take a keener interest on the Product side of things.)&lt;/p&gt;

&lt;p&gt;I’ve been talking to quite a few Delivery Managers and Product Managers, and I shadowed &lt;a href=&quot;https://twitter.com/probablyreading&quot;&gt;one of my favouritest Delivery Managers&lt;/a&gt;. I’m fascinating by the deliberate structures in our agile teams. These structures seem to work &lt;em&gt;because&lt;/em&gt; people divide responsibilities, even though people might not be lacking in skills.&lt;/p&gt;

&lt;p&gt;A good example is that Product Managers sometimes need to be “a product arse”—very outspoken in advocating for the product. This could ruin morale or burn the team out, except that other roles are there to speak out for what’s humanly and technically possible. When you can count on the other roles in a team to complement your role, you achieve more together.&lt;/p&gt;

&lt;p&gt;I had always felt that stereotyping people into roles was oppressive, and would be suffocating to roleplay. But these structures work &lt;em&gt;because&lt;/em&gt; people divide responsibilities—not because people are necessarily lacking in relevant abilities. When you understand your role you &lt;em&gt;can&lt;/em&gt; subvert it in ways that work for you (for instance, some Delivery Managers take a keener interest on the Product side of things.)&lt;/p&gt;

&lt;p&gt;GDS ask interviewing Developers about experience of leadership. I kept quiet because it isn’t necessary for mid-level, and I doubted my experiences in smaller orgs with informal leadership was relevant. At this stage: a lot of that was the stereotyped self-doubt that marginalised people get when applying for roles. The missing ingredient in applying my leadership experience to GDS wasn’t “how does one lead?” but “why do we have roles?”&lt;/p&gt;

&lt;p&gt;This is all opinion. Much of it is influenced by others; the exact understanding is mine. I think it’s a way forward. As I learn more of my triggers, and keep finding new opportunities to exercise myself in different team situations, I’ll get closer and closer to being a credible tech lead. This might take a long time, but that’s particular to &lt;em&gt;this&lt;/em&gt; way of working, and if I wanted I could find a different organisation that I could lead in right now. But GDS’s ways of working care about people, deliver great products, and are worth my effort to learn.&lt;/p&gt;

&lt;h2 id=&quot;the-other-things-ive-been-doing&quot;&gt;The other things I’ve been doing&lt;/h2&gt;

&lt;p&gt;I’ve said all that without mentioning what I’ve actually being doing most of the time! I think I’ll talk about that next time. I’ve done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lots of learning and some changing to GOV.UK Verify infrastructure;&lt;/li&gt;
  &lt;li&gt;supporting multiple teams’ needs simultaneously;&lt;/li&gt;
  &lt;li&gt;becoming more confident approaching unknown people that might not be able to help me;&lt;/li&gt;
  &lt;li&gt;trying/maybe-failing/reflecting to teach &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt; skills to (junior) developers;&lt;/li&gt;
  &lt;li&gt;making progress towards hosting Queer Code London at GDS;&lt;/li&gt;
  &lt;li&gt;debugging S3 bucket policies;&lt;/li&gt;
  &lt;li&gt;working on my &lt;a href=&quot;https://github.com/46bit/tilewater&quot;&gt;Tilewater&lt;/a&gt; game in Rust;&lt;/li&gt;
  &lt;li&gt;thinking about how/if a team could shorten standups to be a feasible standing-up duration;&lt;/li&gt;
  &lt;li&gt;befriending other Reliability Engineers;&lt;/li&gt;
  &lt;li&gt;investigating sporadically elevated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;502&lt;/code&gt; error rates,&lt;/li&gt;
  &lt;li&gt;even practicing how to be gently intimidating so I have a defence mechanism if I ever need one!&lt;/li&gt;
  &lt;li&gt;… and at least a dozen other things!&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I missed a weeknote. Interesting things happened but I went through a period of being down and having crippling hayfever. I learned lots about leading in an agile environment A difficulty with working at GDS is how exposing collaborative ways of working can be. There are lots of potential triggers, like teams expecting pair programming and not building in ay recharge time. There are lots of things one has to work with, such as being overwhelmed by bright office lights. I’ve learned to work around these things. Finding recharge time can be a question of seeing yourself as being in the team rather than of it. Bright office lights can be mitigated by polarising sunglasses, and hopefully by something more stylish in time. And I’ve learned a lot along the way. We seem to learn more from unpleasant experiences than from enjoyable ones. It’s hard to know why something successful works without asking a lot of questions, and some questions risk surfacing lingering issues and creating drama. I suppose that the people we storm with can become deeply respected and appreciated friends as things normalise. I’ve been talking to quite a few Delivery Managers and Product Managers, and I shadowed one of my favouritest Delivery Managers. I’m fascinating by the agile team structures that we use, and their deliberate structures. I had always felt that stereotyping people into roles was oppressive, and would be suffocating to roleplay. But these structures work because people divide responsibilities—not because people are necessarily lacking in relevant abilities. With divided responsibilities comes more focus, clearer lines to collaborate along, and thus more effective teams. When you understand your role you can subvert it in ways that work for you (for instance, some Delivery Managers take a keener interest on the Product side of things.) I’ve been talking to quite a few Delivery Managers and Product Managers, and I shadowed one of my favouritest Delivery Managers. I’m fascinating by the deliberate structures in our agile teams. These structures seem to work because people divide responsibilities, even though people might not be lacking in skills. A good example is that Product Managers sometimes need to be “a product arse”—very outspoken in advocating for the product. This could ruin morale or burn the team out, except that other roles are there to speak out for what’s humanly and technically possible. When you can count on the other roles in a team to complement your role, you achieve more together. I had always felt that stereotyping people into roles was oppressive, and would be suffocating to roleplay. But these structures work because people divide responsibilities—not because people are necessarily lacking in relevant abilities. When you understand your role you can subvert it in ways that work for you (for instance, some Delivery Managers take a keener interest on the Product side of things.) GDS ask interviewing Developers about experience of leadership. I kept quiet because it isn’t necessary for mid-level, and I doubted my experiences in smaller orgs with informal leadership was relevant. At this stage: a lot of that was the stereotyped self-doubt that marginalised people get when applying for roles. The missing ingredient in applying my leadership experience to GDS wasn’t “how does one lead?” but “why do we have roles?” This is all opinion. Much of it is influenced by others; the exact understanding is mine. I think it’s a way forward. As I learn more of my triggers, and keep finding new opportunities to exercise myself in different team situations, I’ll get closer and closer to being a credible tech lead. This might take a long time, but that’s particular to this way of working, and if I wanted I could find a different organisation that I could lead in right now. But GDS’s ways of working care about people, deliver great products, and are worth my effort to learn. The other things I’ve been doing I’ve said all that without mentioning what I’ve actually being doing most of the time! I think I’ll talk about that next time. I’ve done: lots of learning and some changing to GOV.UK Verify infrastructure; supporting multiple teams’ needs simultaneously; becoming more confident approaching unknown people that might not be able to help me; trying/maybe-failing/reflecting to teach Terraform skills to (junior) developers; making progress towards hosting Queer Code London at GDS; debugging S3 bucket policies; working on my Tilewater game in Rust; thinking about how/if a team could shorten standups to be a feasible standing-up duration; befriending other Reliability Engineers; investigating sporadically elevated 502 error rates, even practicing how to be gently intimidating so I have a defence mechanism if I ever need one! … and at least a dozen other things!</summary></entry><entry><title type="html">Weeknote 2</title><link href="https://46b.it/2018/weeknote-2/" rel="alternate" type="text/html" title="Weeknote 2" /><published>2018-06-02T00:00:00+00:00</published><updated>2018-06-02T00:00:00+00:00</updated><id>https://46b.it/2018/weeknote-2</id><content type="html" xml:base="https://46b.it/2018/weeknote-2/">&lt;p&gt;This was a short week. Monday was a Bank Holiday. On Wednesday I stayed at home because of sinus fatigue (hayfever sucks!) and didn’t get much done. But I did some proper infrastructure work this week.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;aws-lambda&quot;&gt;AWS Lambda&lt;/h2&gt;

&lt;p&gt;Some teams within GDS are experimenting with using &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;, a service that runs your code for you and saves worrying about servers or containers and only charges you for its compute time. The team I’m visiting is trying it for deploying an hourly batch job, and I’m helping because of delays with the main thing I’m there for.&lt;/p&gt;

&lt;p&gt;The system’s aim is for a web endpoint that fetches several resources, verifies their signatures, and saves them into an object store. It’s a cache that also verifies signatures. We’re using a Lambda function for that web endpoint, and an S3 bucket as the object store, but there’s several more components needed.&lt;/p&gt;

&lt;p&gt;We’re using &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt; to define the infrastructure into code, but sadly this isn’t in the open. To be consistent with other projects we don’t want to use Terraform to deploy code to the Lambda, so we’ve had to find a different way to do that.&lt;/p&gt;

&lt;p&gt;Borrowing from an approach AWS advised, we’ve created an extra Lambda function and S3 bucket. This “update” function has IAM permissions to change the code of the function we care about. When a JAR file is placed in the S3 bucket, a SNS notification calls the update function (based on &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/s3_bucket_notification.html#add-notification-configuration-to-lambda-function&quot;&gt;this&lt;/a&gt; Terraform example.)&lt;/p&gt;

&lt;p&gt;I have mixed feelings. This might work and never need touching again—or have unexpected problems that are hard to investigate because so many of Amazon’s services (e.g., IAM) are black boxes and don’t log their decision-making. I prefer systems where things are more explicit, because how they work can be investigated and rediscovered. But this will teach us something, and I hope I can put in place testing to highlight &lt;em&gt;what&lt;/em&gt; is broken if things break.&lt;/p&gt;

&lt;h2 id=&quot;bringing-more-of-myself-to-work&quot;&gt;Bringing more of myself to work&lt;/h2&gt;

&lt;p&gt;In my own time I’ve been trying to bring more of myself to work, and act less. Not pretending happiness when unhappy is a bit scary around other people, but gosh it’s relieving. I resorted to a guide of &lt;a href=&quot;https://worddreams.wordpress.com/2009/10/07/how-to-show-not-tell-an-emotion-a-to-d/&quot;&gt;how to show emotions&lt;/a&gt; to figure out healthy ways to express myself without causing problems for others. It seems to be going well—next week I hope to find a way to ask for feedback about it.&lt;/p&gt;

&lt;p&gt;Next week will be quite interesting. I’m shadowing a Delivery Manager; hoping to learn more about what they do, how it might suit me, and how to protect my own energy better. Given that this infrastructure relies on events happening as expected, I also hope to put in place some automated testing.&lt;/p&gt;</content><author><name></name></author><summary type="html">This was a short week. Monday was a Bank Holiday. On Wednesday I stayed at home because of sinus fatigue (hayfever sucks!) and didn’t get much done. But I did some proper infrastructure work this week.</summary></entry><entry><title type="html">Weeknote 1</title><link href="https://46b.it/2018/weeknote-1/" rel="alternate" type="text/html" title="Weeknote 1" /><published>2018-05-27T00:00:00+00:00</published><updated>2018-05-27T00:00:00+00:00</updated><id>https://46b.it/2018/weeknote-1</id><content type="html" xml:base="https://46b.it/2018/weeknote-1/">&lt;p&gt;Since joining GDS I’ve learned a lot about infrastructure and ways of working like agile and XP. And I’ve contributed a lot back to my team from that. But after 10 months I needed to get some wider context, and see how other teams work. To that end I’m helping a product team deploy its infrastructure for private beta.&lt;/p&gt;

&lt;p&gt;I spent last week starting to understand my new team’s culture and mission, investigating the project I’m helping deploy, researching ways of packaging Java/JVM projects for release (e.g., fat JARs), and arranging community things.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/Queer-Code-London/&quot;&gt;Queer Code London&lt;/a&gt; need a new venue for their Saturday lunchtime coding events, and I’ve been checking that we’re OK to host it in the GDS office. (We can!)&lt;/p&gt;

&lt;p&gt;I went to leaving drinks for Dan and Graham, both of whom were on the PaaS team when I first joined. A bit sad—both were fantastic to work with—and yet lovely to see such experienced people finding new challenges.&lt;/p&gt;

&lt;p&gt;I learned from my time on the &lt;a href=&quot;https://www.cloud.service.gov.uk&quot;&gt;GOV.UK PaaS&lt;/a&gt; team that structured summary notes are incredibly valuable, so I condensed a lot of historical experimentation into some Markdown notes.&lt;/p&gt;

&lt;p&gt;I tried to get this project running on the PaaS, my old team’s Cloud Foundry platform, but it didn’t work because the file layout is very odd. There’s a lot of external policy we have to work with, limiting what we can change.&lt;/p&gt;

&lt;p&gt;Shortly after that I changed my approach. I’m only helping this team for a few weeks, so I shouldn’t try to Get Things Done or directly make problems disappear. Instead I’ll act like a mentor, boosting the team’s own confidence with infrastructure. This process has a learning curve for me but is less pressure and quite enjoyable!&lt;/p&gt;

&lt;p&gt;I got upset this week, having left my familiar team and feeling a bit out of place in the Ops community. I haven’t observed the group dynamics enough to understand why it’s so male, and the last year has taught me to be careful about investing my energy in culture problems.&lt;/p&gt;

&lt;p&gt;As ever the small, lunchtime Meditation Club got me through the week. Having people about me for reassurance and wellbeing skills is an utter joy.&lt;/p&gt;</content><author><name></name></author><summary type="html">Since joining GDS I’ve learned a lot about infrastructure and ways of working like agile and XP. And I’ve contributed a lot back to my team from that. But after 10 months I needed to get some wider context, and see how other teams work. To that end I’m helping a product team deploy its infrastructure for private beta. I spent last week starting to understand my new team’s culture and mission, investigating the project I’m helping deploy, researching ways of packaging Java/JVM projects for release (e.g., fat JARs), and arranging community things.</summary></entry><entry><title type="html">📝 Leader Election</title><link href="https://46b.it/2018/leader-election/" rel="alternate" type="text/html" title="📝 Leader Election" /><published>2018-04-02T00:00:00+00:00</published><updated>2018-04-02T00:00:00+00:00</updated><id>https://46b.it/2018/leader-election</id><content type="html" xml:base="https://46b.it/2018/leader-election/">&lt;p&gt;&lt;a href=&quot;/assets/writing/leader-election.jpg&quot;&gt;&lt;img src=&quot;/assets/writing/leader-election.jpg&quot; style=&quot;width: 100%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve decided I want to try Sketchnoting. I don’t have much experience of drawing things, and I thought a friendly character would be a good start. So I focused on finding that character first:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Character design is hard &lt;a href=&quot;https://t.co/L6jeXqlVDG&quot;&gt;pic.twitter.com/L6jeXqlVDG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael (Miki) Mokrysz (@46bit) &lt;a href=&quot;https://twitter.com/46bit/status/980382508738002944?ref_src=twsrc%5Etfw&quot;&gt;April 1, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I have my characters! &lt;a href=&quot;https://t.co/nGySx8vzJb&quot;&gt;pic.twitter.com/nGySx8vzJb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael (Miki) Mokrysz (@46bit) &lt;a href=&quot;https://twitter.com/46bit/status/980386876891783168?ref_src=twsrc%5Etfw&quot;&gt;April 1, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">I’ve decided I want to try Sketchnoting. I don’t have much experience of drawing things, and I thought a friendly character would be a good start. So I focused on finding that character first: Character design is hard pic.twitter.com/L6jeXqlVDG&amp;mdash; Michael (Miki) Mokrysz (@46bit) April 1, 2018 I have my characters! pic.twitter.com/nGySx8vzJb&amp;mdash; Michael (Miki) Mokrysz (@46bit) April 1, 2018</summary></entry><entry><title type="html">15 years of web development</title><link href="https://46b.it/2018/15-years-from-messy-php-to-microservices/" rel="alternate" type="text/html" title="15 years of web development" /><published>2018-03-31T00:00:00+00:00</published><updated>2018-03-31T00:00:00+00:00</updated><id>https://46b.it/2018/15-years-from-messy-php-to-microservices</id><content type="html" xml:base="https://46b.it/2018/15-years-from-messy-php-to-microservices/">&lt;p&gt;When I started web development in the early 2000s, your typical medium sized website ran on a single codebase that ran in exactly the same way on a few webservers. The frontend, things like accessibility and JavaScript, felt like novelties.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;That single codebase &lt;em&gt;was&lt;/em&gt; the website. It received web requests directly from its users, it talked directly to the database that stored the website’s state, it decided all the business logic of how the website worked, and it rendered HTML to be sent back to the user.&lt;/p&gt;

&lt;p&gt;Lots has changed. Some of this might be about the quality of environments I’m working in, but I don’t think very much.&lt;/p&gt;

&lt;h2 id=&quot;code-quality&quot;&gt;Code quality&lt;/h2&gt;

&lt;p&gt;At the time, most of the code I saw from other programmers embedded SQL queries directly into HTML templates:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;A website&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
Visitor count: &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mysql_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO visitors (ip_address) VALUES (&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REMOTE_ADDR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_fetch_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT COUNT(*) FROM visitors;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I haven’t run that code, but it’s quite typical of what freelance web developers were doing in the early 2000s. It rarely had proper error handling, rarely prevented SQL Injection, and almost never prevented XSS Injection.&lt;/p&gt;

&lt;p&gt;I got a lot of feedback about how good I was at avoiding these problems, but I eventually decided that relying on my attention to detail to avoid these problems didn’t work. Hence I picked up MySQL query parameters to avoid SQL Injection, and eventually PHP frameworks like CodeIgniter to avoid XSS Injection.&lt;/p&gt;

&lt;p&gt;We’ve come a long way in our tooling since then. Modern frameworks automatically escape data being output into HTML templates against XSS attacks. Modern frameworks often have an architecture that would make it inconvenient and difficult to embed database queries into HTML. Modern frameworks are often used with ORMs or other mechanisms that make SQL Injection much less likely.&lt;/p&gt;

&lt;p&gt;All of this means you don’t have to think as much. Basic web application security and basic web application architecture is almost an automatic.&lt;/p&gt;

&lt;h2 id=&quot;coupling-of-components&quot;&gt;Coupling of components&lt;/h2&gt;

&lt;p&gt;Earlier, I described how 2000s-era websites generally had one codebase for everything and deployed a single thing onto their webservers. This can work very happily when you first build a website, but it starts to have problems if you get a lot of traffic.&lt;/p&gt;

&lt;p&gt;If you want to change how data is stored, for instance to add caching around it, your first task becomes to abstract the data layer from the rest of your codebase. This could consume weeks of work without delivering any user value.&lt;/p&gt;

&lt;p&gt;Since the mid/late 2000s, mainstream frameworks started to separate the data layer out, for instance keeping it in the Models if following an MVC pattern. This meant that your changes only affect a more concentrated part of the codebase. But you ultimately still have one codebase and very little abstraction.&lt;/p&gt;

&lt;p&gt;Things have marched on since then. These days you commonly deploy several components, rather than just one. You’ll have an API component that exposes ways to access your data but abstracts most of the details of how that’s done. You’ll have a backend component that performs business logic on data it gets and sets using the API. Then you’ll have a frontend component that directly interacts with user requests and talks to the backend.&lt;/p&gt;

&lt;p&gt;You won’t necessarily have all these components. You can achieve a lot of the benefits by keeping this pattern in mind at an early stage. But if you’re a microservices architecture like GOV.UK you have several data layer APIs, many backends, and then relatively few frontends. Separating these components keeps each piece small enough to be effectively worked on.&lt;/p&gt;

&lt;h2 id=&quot;frontend-sophistication&quot;&gt;Frontend sophistication&lt;/h2&gt;

&lt;p&gt;Over those 15 years, JavaScript has gotten a lot faster and a lot more capable. Web browser APIs have gotten a lot more featureful, offering 3D graphics and videocalls and many other things besides.&lt;/p&gt;

&lt;p&gt;User experience has gotten a lot better and a lot higher expectations (except for new weirdnesses like click-through cookie law banners.)&lt;/p&gt;

&lt;p&gt;I started as more of a front-end developer, and then got to know the back-end as well. For many years I did freelance projects that were front-end, back-end or both and wouldn’t say I did one side better than the other.&lt;/p&gt;

&lt;p&gt;I think full-stack development has become less plausible. Expectations of user experience have gotten a lot higher, and the complexity of front-end development has exploded in a new search for the best ways of doing things.&lt;/p&gt;

&lt;p&gt;The challenge we seem to be left with is where business logic belongs. The frontend is nicest if you can make it a thin wrapper and push that onto the backend; the backend is nicest if you can make it a thin wrapper and push that onto the frontend.&lt;/p&gt;

&lt;p&gt;At this stage I identify as a backend/operations person. I’m sure I’ll work heavily with the frontend again one day, but I don’t think I can do both any longer.&lt;/p&gt;

&lt;h2 id=&quot;testing-and-operational-sophistication&quot;&gt;Testing and operational sophistication&lt;/h2&gt;

&lt;p&gt;Tests used to be purely for your business logic. You’d test that your code calculated the correct prices. Deployment often meant FTPing your code onto a shared hosting environment. It was a mess.&lt;/p&gt;

&lt;p&gt;Things have changed for the better. Source control is almost universal. Infrastructure has gotten more accessible to developers, which is a good thing for me. Testing of running/deploying websites is much more common.&lt;/p&gt;

&lt;h2 id=&quot;what-hasnt-changed&quot;&gt;What hasn’t changed?&lt;/h2&gt;

&lt;p&gt;Very often we still want things to “just work!” But what things working look like is getting better and better, and that’s a good thing.&lt;/p&gt;</content><author><name></name></author><summary type="html">When I started web development in the early 2000s, your typical medium sized website ran on a single codebase that ran in exactly the same way on a few webservers. The frontend, things like accessibility and JavaScript, felt like novelties.</summary></entry></feed>